syntax = "proto3";

package trading;

option go_package = "tradingbot/protos";

service TradingExecutor {
  rpc ExecuteTrade (TradeRequest) returns (TradeResponse) {}
  rpc GetMarketData (MarketDataRequest) returns (stream MarketDataResponse) {}
  rpc MonitorOrderStatus (OrderStatusRequest) returns (stream OrderStatusResponse) {}
  rpc BatchExecuteTrades (BatchTradeRequest) returns (BatchTradeResponse) {}
}

message TradeRequest {
  string symbol = 1;
  string side = 2;
  double amount = 3;
  double price = 4;
  string order_type = 5;
  map<string, string> params = 6;
}

message TradeResponse {
  string order_id = 1;
  string status = 2;
  double executed_price = 3;
  double executed_amount = 4;
  double fee = 5;
  string error = 6;
  map<string, string> metadata = 7;
}

message MarketDataRequest {
  string symbol = 1;
  string data_type = 2;
  int32 depth = 3;
}

message MarketDataResponse {
  string symbol = 1;
  double price = 2;
  double volume = 3;
  double bid = 4;
  double ask = 5;
  repeated OrderBookLevel bids = 6;
  repeated OrderBookLevel asks = 7;
  int64 timestamp = 8;
}

message OrderBookLevel {
  double price = 1;
  double amount = 2;
}

message OrderStatusRequest {
  string order_id = 1;
}

message OrderStatusResponse {
  string order_id = 1;
  string status = 2;
  double filled_amount = 3;
  double remaining_amount = 4;
  double average_price = 5;
  string last_error = 6;
}

message BatchTradeRequest {
  repeated TradeRequest trades = 1;
  bool atomic = 2;
}

message BatchTradeResponse {
  repeated TradeResponse results = 1;
  bool success = 2;
  string error = 3;
}
