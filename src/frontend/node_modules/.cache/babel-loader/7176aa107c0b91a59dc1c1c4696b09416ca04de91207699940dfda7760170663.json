{"ast":null,"code":"import axios from 'axios';\n\n// API Response Types\n\nclass ApiClient {\n  constructor() {\n    this.client = void 0;\n    this.client = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL}/api/v1`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Add response interceptor for error handling\n    this.client.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        // Handle unauthorized access\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Agent Management\n  async getAgentStatus(agentType) {\n    try {\n      const response = await this.client.get(`/agents/${agentType}/status`);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async startAgent(agentType) {\n    try {\n      await this.client.post(`/agents/${agentType}/start`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async stopAgent(agentType) {\n    try {\n      await this.client.post(`/agents/${agentType}/stop`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n\n  // Strategy Management\n  async createStrategy(strategy) {\n    try {\n      const response = await this.client.post('/strategies/trading/create', strategy);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async getStrategies() {\n    try {\n      const response = await this.client.get('/strategies');\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n\n  // Wallet Management\n  async createWallet(name) {\n    try {\n      const response = await this.client.post('/wallet/create', {\n        name\n      });\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async confirmWallet(walletAddress) {\n    try {\n      await this.client.post('/wallet/confirm', {\n        walletAddress,\n        confirmed: true\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async getWalletBalance(walletAddress) {\n    try {\n      const response = await this.client.get(`/wallet/balance/${walletAddress}`);\n      return {\n        data: response.data.balance,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async getWalletTransactions(walletAddress) {\n    try {\n      const response = await this.client.get(`/wallet/transactions/${walletAddress}`);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  handleError(error) {\n    var _error$response2, _error$response2$data;\n    if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.detail) {\n      return error.response.data.detail;\n    }\n    if (error.message) {\n      return error.message;\n    }\n    return 'An unexpected error occurred';\n  }\n}\nexport const apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["axios","ApiClient","constructor","client","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","response","use","error","_error$response","status","window","location","href","Promise","reject","getAgentStatus","agentType","get","data","success","handleError","startAgent","post","stopAgent","createStrategy","strategy","getStrategies","createWallet","name","confirmWallet","walletAddress","confirmed","getWalletBalance","balance","getWalletTransactions","_error$response2","_error$response2$data","detail","message","apiClient"],"sources":["/home/ubuntu/repos/tradingbot/src/frontend/src/api/client.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosError } from 'axios';\n\n// API Response Types\nexport interface ApiResponse<T> {\n  data?: T;\n  error?: string;\n  success: boolean;\n}\n\nexport interface AgentResponse {\n  id: string;\n  type: 'trading' | 'defi';\n  status: 'running' | 'stopped' | 'error';\n  lastUpdated: string;\n}\n\nexport interface StrategyResponse {\n  id: string;\n  name: string;\n  type: string;\n  parameters: Record<string, any>;\n  status: 'active' | 'inactive';\n  createdAt: string;\n}\n\nexport interface WalletResponse {\n  address: string;\n  publicKey: string;\n  balance: string;\n  transactions: Array<{\n    hash: string;\n    type: string;\n    amount: string;\n    status: string;\n    timestamp: string;\n  }>;\n}\n\nclass ApiClient {\n  private client: AxiosInstance;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL}/api/v1`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Add response interceptor for error handling\n    this.client.interceptors.response.use(\n      (response) => response,\n      (error: AxiosError) => {\n        if (error.response?.status === 401) {\n          // Handle unauthorized access\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Agent Management\n  async getAgentStatus(agentType: string): Promise<ApiResponse<AgentResponse>> {\n    try {\n      const response = await this.client.get(`/agents/${agentType}/status`);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async startAgent(agentType: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post(`/agents/${agentType}/start`);\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async stopAgent(agentType: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post(`/agents/${agentType}/stop`);\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  // Strategy Management\n  async createStrategy(strategy: any): Promise<ApiResponse<StrategyResponse>> {\n    try {\n      const response = await this.client.post('/strategies/trading/create', strategy);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getStrategies(): Promise<ApiResponse<StrategyResponse[]>> {\n    try {\n      const response = await this.client.get('/strategies');\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  // Wallet Management\n  async createWallet(name: string): Promise<ApiResponse<WalletResponse>> {\n    try {\n      const response = await this.client.post('/wallet/create', { name });\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async confirmWallet(walletAddress: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post('/wallet/confirm', { walletAddress, confirmed: true });\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getWalletBalance(walletAddress: string): Promise<ApiResponse<string>> {\n    try {\n      const response = await this.client.get(`/wallet/balance/${walletAddress}`);\n      return { data: response.data.balance, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getWalletTransactions(walletAddress: string): Promise<ApiResponse<WalletResponse['transactions']>> {\n    try {\n      const response = await this.client.get(`/wallet/transactions/${walletAddress}`);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  private handleError(error: any): string {\n    if (error.response?.data?.detail) {\n      return error.response.data.detail;\n    }\n    if (error.message) {\n      return error.message;\n    }\n    return 'An unexpected error occurred';\n  }\n}\n\nexport const apiClient = new ApiClient();\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}