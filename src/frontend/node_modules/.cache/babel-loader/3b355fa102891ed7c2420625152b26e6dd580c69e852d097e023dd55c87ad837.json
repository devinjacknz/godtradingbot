{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport apiClient from '../api/client';\n// Token management helpers\nconst setTokens = (access_token, expires_in) => {\n  localStorage.setItem('token', access_token);\n  localStorage.setItem('token_expiry', String(Date.now() + expires_in * 1000));\n};\nconst clearTokens = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('token_expiry');\n};\nexport const useAuthContext = () => {\n  _s();\n  const navigate = useNavigate();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const token = localStorage.getItem('token');\n    return !!token;\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const signup = useCallback(async (email, username, password) => {\n    setIsLoading(true);\n    try {\n      var _response$data;\n      const response = await apiClient.signup({\n        email,\n        username,\n        password\n      });\n      if (response.success && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('token_expiry', String(Date.now() + response.data.expires_in * 1000));\n        // Set user data\n        const newUser = {\n          id: username,\n          email,\n          username,\n          roles: [{\n            name: 'backend_developer',\n            permissions: ['execute_market_maker_trades']\n          }]\n        };\n        setUser(newUser);\n        setIsAuthenticated(true);\n        navigate('/agent-selection');\n        return true;\n      }\n      throw new Error(response.error || 'Signup failed');\n    } catch (error) {\n      console.error('Signup error:', error);\n      throw error instanceof Error ? error : new Error('An unexpected error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [navigate]);\n  const login = useCallback(async formData => {\n    setIsLoading(true);\n    try {\n      var _response$data2;\n      const response = await apiClient.login({\n        username: formData.email,\n        password: formData.password\n      });\n      if (response.success && (_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.access_token) {\n        setTokens(response.data.access_token, response.data.expires_in);\n\n        // Set user data using email as identifier\n        const newUser = {\n          id: formData.email,\n          email: formData.email,\n          username: formData.email.split('@')[0],\n          roles: [{\n            name: 'backend_developer',\n            permissions: ['execute_market_maker_trades']\n          }]\n        };\n        setUser(newUser);\n        setIsAuthenticated(true);\n        navigate('/agent-selection');\n        return true;\n      }\n      throw new Error(response.error || 'Login failed');\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error instanceof Error ? error : new Error('An unexpected error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [navigate]);\n\n  // Function to refresh the access token\n  const refreshToken = useCallback(async () => {\n    try {\n      var _response$data3;\n      const response = await apiClient.refreshToken();\n      if (response.success && (_response$data3 = response.data) !== null && _response$data3 !== void 0 && _response$data3.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('token_expiry', String(Date.now() + response.data.expires_in * 1000));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      return false;\n    }\n  }, []);\n  const logout = useCallback(async () => {\n    try {\n      await apiClient.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      clearTokens();\n      setUser(null);\n      setIsAuthenticated(false);\n      navigate('/login');\n    }\n  }, [navigate]);\n\n  // Add token expiry check effect\n  useEffect(() => {\n    const checkTokenExpiry = async () => {\n      const tokenExpiry = localStorage.getItem('token_expiry');\n      if (tokenExpiry) {\n        const expiryTime = parseInt(tokenExpiry);\n        if (Date.now() + 5 * 60 * 1000 >= expiryTime) {\n          const success = await refreshToken();\n          if (!success) {\n            await logout();\n          }\n        }\n      }\n    };\n    const interval = setInterval(checkTokenExpiry, 4 * 60 * 1000); // Check every 4 minutes\n    return () => clearInterval(interval);\n  }, [refreshToken, logout]);\n  return {\n    user,\n    isAuthenticated,\n    isLoading,\n    signup,\n    login,\n    logout,\n    refreshToken\n  };\n};\n_s(useAuthContext, \"0+3W/cuePhe6+SMEcfkfrVFfKzA=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useCallback","useEffect","useNavigate","apiClient","setTokens","access_token","expires_in","localStorage","setItem","String","Date","now","clearTokens","removeItem","useAuthContext","_s","navigate","user","setUser","isAuthenticated","setIsAuthenticated","token","getItem","isLoading","setIsLoading","signup","email","username","password","_response$data","response","success","data","newUser","id","roles","name","permissions","Error","error","console","login","formData","_response$data2","split","refreshToken","_response$data3","logout","checkTokenExpiry","tokenExpiry","expiryTime","parseInt","interval","setInterval","clearInterval"],"sources":["/home/ubuntu/repos/tradingbot/src/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport apiClient from '../api/client';\n\nexport interface User {\n  id: string;\n  email: string;\n  username: string;\n  roles: Array<{\n    name: string;\n    permissions: string[];\n  }>;\n}\n\nexport interface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  signup: (email: string, username: string, password: string) => Promise<boolean>;\n  login: (formData: { email: string; password: string }) => Promise<boolean>;\n  logout: () => Promise<void>;\n  refreshToken: () => Promise<boolean>;\n}\n\n// Token management helpers\nconst setTokens = (access_token: string, expires_in: number) => {\n  localStorage.setItem('token', access_token);\n  localStorage.setItem('token_expiry', String(Date.now() + (expires_in * 1000)));\n};\n\nconst clearTokens = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('token_expiry');\n};\n\nexport const useAuthContext = (): AuthContextType => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState<User | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(() => {\n    const token = localStorage.getItem('token');\n    return !!token;\n  });\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const signup = useCallback(async (email: string, username: string, password: string) => {\n    setIsLoading(true);\n    try {\n      const response = await apiClient.signup({ email, username, password });\n      if (response.success && response.data?.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('token_expiry', String(Date.now() + (response.data.expires_in * 1000)));\n        // Set user data\n        const newUser: User = {\n          id: username,\n          email,\n          username,\n          roles: [{ name: 'backend_developer', permissions: ['execute_market_maker_trades'] }]\n        };\n        setUser(newUser);\n        setIsAuthenticated(true);\n        navigate('/agent-selection');\n        return true;\n      }\n      throw new Error(response.error || 'Signup failed');\n    } catch (error) {\n      console.error('Signup error:', error);\n      throw error instanceof Error ? error : new Error('An unexpected error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [navigate]);\n\n  const login = useCallback(async (formData: { email: string; password: string }) => {\n    setIsLoading(true);\n    try {\n      const response = await apiClient.login({ username: formData.email, password: formData.password });\n      if (response.success && response.data?.access_token) {\n        setTokens(response.data.access_token, response.data.expires_in);\n        \n        // Set user data using email as identifier\n        const newUser: User = {\n          id: formData.email,\n          email: formData.email,\n          username: formData.email.split('@')[0],\n          roles: [{ name: 'backend_developer', permissions: ['execute_market_maker_trades'] }]\n        };\n        setUser(newUser);\n        setIsAuthenticated(true);\n        navigate('/agent-selection');\n        return true;\n      }\n      throw new Error(response.error || 'Login failed');\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error instanceof Error ? error : new Error('An unexpected error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [navigate]);\n\n  // Function to refresh the access token\n  const refreshToken = useCallback(async () => {\n    try {\n      const response = await apiClient.refreshToken();\n      if (response.success && response.data?.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('token_expiry', String(Date.now() + (response.data.expires_in * 1000)));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      return false;\n    }\n  }, []);\n\n  const logout = useCallback(async () => {\n    try {\n      await apiClient.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      clearTokens();\n      setUser(null);\n      setIsAuthenticated(false);\n      navigate('/login');\n    }\n  }, [navigate]);\n\n  // Add token expiry check effect\n  useEffect(() => {\n    const checkTokenExpiry = async () => {\n      const tokenExpiry = localStorage.getItem('token_expiry');\n      if (tokenExpiry) {\n        const expiryTime = parseInt(tokenExpiry);\n        if (Date.now() + 5 * 60 * 1000 >= expiryTime) {\n          const success = await refreshToken();\n          if (!success) {\n            await logout();\n          }\n        }\n      }\n    };\n\n    const interval = setInterval(checkTokenExpiry, 4 * 60 * 1000); // Check every 4 minutes\n    return () => clearInterval(interval);\n  }, [refreshToken, logout]);\n\n  return {\n    user,\n    isAuthenticated,\n    isLoading,\n    signup,\n    login,\n    logout,\n    refreshToken,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}