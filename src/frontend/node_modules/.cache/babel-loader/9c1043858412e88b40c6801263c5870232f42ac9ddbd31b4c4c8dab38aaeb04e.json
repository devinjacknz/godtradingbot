{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/repos/tradingbot/src/frontend/src/pages/BotIntegration.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Paper, Typography, CircularProgress, Alert, Button, Stepper, Step, StepLabel } from '@mui/material';\nimport apiClient from '../api/client';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotIntegration = () => {\n  _s();\n  const navigate = useNavigate();\n  const [activeStep, setActiveStep] = useState(0);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [strategy, setStrategy] = useState(null);\n  const steps = ['Validating Strategy', 'Configuring Bot', 'Testing Connections', 'Integration Complete'];\n  useEffect(() => {\n    const integrateBot = async () => {\n      try {\n        var _statusResponse$data;\n        const strategyId = localStorage.getItem('currentStrategyId');\n        if (!strategyId) {\n          throw new Error('No strategy selected');\n        }\n\n        // Step 1: Validate Strategy\n        const strategyResponse = await apiClient.getStrategies();\n        if (!strategyResponse.success || !strategyResponse.data) {\n          throw new Error('Failed to validate strategy');\n        }\n        const currentStrategy = strategyResponse.data.find(s => s.id === strategyId);\n        if (!currentStrategy) {\n          throw new Error('Strategy not found');\n        }\n        setStrategy(currentStrategy);\n        setActiveStep(1);\n\n        // Step 2: Configure Bot\n        const startResponse = await apiClient.startAgent('trading');\n        if (!startResponse.success) {\n          throw new Error('Failed to start trading agent');\n        }\n        setActiveStep(2);\n\n        // Step 3: Test Connections\n        const statusResponse = await apiClient.getAgentStatus('trading');\n        if (!statusResponse.success || ((_statusResponse$data = statusResponse.data) === null || _statusResponse$data === void 0 ? void 0 : _statusResponse$data.status) !== 'running') {\n          throw new Error('Failed to verify agent status');\n        }\n        setActiveStep(3);\n        setIsLoading(false);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Bot integration failed. Please try again.');\n        setIsLoading(false);\n      }\n    };\n    integrateBot();\n  }, []);\n  const handleContinue = () => {\n    navigate('/key-management');\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      maxWidth: 800,\n      mx: 'auto',\n      p: 3\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Bot Integration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 3\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        p: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Stepper, {\n        activeStep: activeStep,\n        sx: {\n          mb: 4\n        },\n        children: steps.map(label => /*#__PURE__*/_jsxDEV(Step, {\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          py: 3\n        },\n        children: isLoading ? /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n            sx: {\n              mb: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: [steps[activeStep], \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            color: \"success.main\",\n            children: \"Bot Integration Complete!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"textSecondary\",\n            sx: {\n              mb: 3\n            },\n            children: [\"Your trading bot has been successfully configured with strategy: \", strategy === null || strategy === void 0 ? void 0 : strategy.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"textSecondary\",\n            sx: {\n              mb: 2\n            },\n            children: [\"Strategy Type: \", strategy === null || strategy === void 0 ? void 0 : strategy.type, (strategy === null || strategy === void 0 ? void 0 : strategy.parameters) && /*#__PURE__*/_jsxDEV(Box, {\n              component: \"pre\",\n              sx: {\n                mt: 1,\n                p: 2,\n                bgcolor: 'grey.100',\n                borderRadius: 1\n              },\n              children: JSON.stringify(strategy.parameters, null, 2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            size: \"large\",\n            onClick: handleContinue,\n            children: \"Continue to Key Management\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(BotIntegration, \"A/cM1T0yDmlnTwLvom7WLKZHZcU=\", false, function () {\n  return [useNavigate];\n});\n_c = BotIntegration;\nexport default BotIntegration;\nvar _c;\n$RefreshReg$(_c, \"BotIntegration\");","map":{"version":3,"names":["React","useState","useEffect","Box","Paper","Typography","CircularProgress","Alert","Button","Stepper","Step","StepLabel","apiClient","useNavigate","jsxDEV","_jsxDEV","BotIntegration","_s","navigate","activeStep","setActiveStep","error","setError","isLoading","setIsLoading","strategy","setStrategy","steps","integrateBot","_statusResponse$data","strategyId","localStorage","getItem","Error","strategyResponse","getStrategies","success","data","currentStrategy","find","s","id","startResponse","startAgent","statusResponse","getAgentStatus","status","err","message","handleContinue","sx","maxWidth","mx","p","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","severity","mb","map","label","textAlign","py","color","name","type","parameters","component","mt","bgcolor","borderRadius","JSON","stringify","size","onClick","_c","$RefreshReg$"],"sources":["/home/ubuntu/repos/tradingbot/src/frontend/src/pages/BotIntegration.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  CircularProgress,\n  Alert,\n  Button,\n  Stepper,\n  Step,\n  StepLabel,\n} from '@mui/material';\nimport apiClient, { StrategyResponse } from '../api/client';\nimport { useNavigate } from 'react-router-dom';\n\nconst BotIntegration: React.FC = () => {\n  const navigate = useNavigate();\n  const [activeStep, setActiveStep] = useState(0);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [strategy, setStrategy] = useState<StrategyResponse | null>(null);\n\n  const steps = [\n    'Validating Strategy',\n    'Configuring Bot',\n    'Testing Connections',\n    'Integration Complete',\n  ];\n\n  useEffect(() => {\n    const integrateBot = async () => {\n      try {\n        const strategyId = localStorage.getItem('currentStrategyId');\n        if (!strategyId) {\n          throw new Error('No strategy selected');\n        }\n\n        // Step 1: Validate Strategy\n        const strategyResponse = await apiClient.getStrategies();\n        if (!strategyResponse.success || !strategyResponse.data) {\n          throw new Error('Failed to validate strategy');\n        }\n        \n        const currentStrategy = strategyResponse.data.find(s => s.id === strategyId);\n        if (!currentStrategy) {\n          throw new Error('Strategy not found');\n        }\n        \n        setStrategy(currentStrategy);\n        setActiveStep(1);\n\n        // Step 2: Configure Bot\n        const startResponse = await apiClient.startAgent('trading');\n        if (!startResponse.success) {\n          throw new Error('Failed to start trading agent');\n        }\n        setActiveStep(2);\n\n        // Step 3: Test Connections\n        const statusResponse = await apiClient.getAgentStatus('trading');\n        if (!statusResponse.success || statusResponse.data?.status !== 'running') {\n          throw new Error('Failed to verify agent status');\n        }\n        setActiveStep(3);\n\n        setIsLoading(false);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Bot integration failed. Please try again.');\n        setIsLoading(false);\n      }\n    };\n\n    integrateBot();\n  }, []);\n\n  const handleContinue = () => {\n    navigate('/key-management');\n  };\n\n  return (\n    <Box sx={{ maxWidth: 800, mx: 'auto', p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Bot Integration\n      </Typography>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      <Paper sx={{ p: 3 }}>\n        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n\n        <Box sx={{ textAlign: 'center', py: 3 }}>\n          {isLoading ? (\n            <Box>\n              <CircularProgress sx={{ mb: 2 }} />\n              <Typography>\n                {steps[activeStep]}...\n              </Typography>\n            </Box>\n          ) : (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom color=\"success.main\">\n                Bot Integration Complete!\n              </Typography>\n              <Typography color=\"textSecondary\" sx={{ mb: 3 }}>\n                Your trading bot has been successfully configured with strategy: {strategy?.name}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\n                Strategy Type: {strategy?.type}\n                {strategy?.parameters && (\n                  <Box component=\"pre\" sx={{ mt: 1, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>\n                    {JSON.stringify(strategy.parameters, null, 2)}\n                  </Box>\n                )}\n              </Typography>\n              <Button\n                variant=\"contained\"\n                size=\"large\"\n                onClick={handleContinue}\n              >\n                Continue to Key Management\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default BotIntegration;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}