# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import trading_pb2 as trading__pb2


class TradingExecutorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteTrade = channel.unary_unary(
            "/trading.TradingExecutor/ExecuteTrade",
            request_serializer=trading__pb2.TradeRequest.SerializeToString,
            response_deserializer=trading__pb2.TradeResponse.FromString,
            _registered_method=True,
        )
        self.GetMarketData = channel.unary_stream(
            "/trading.TradingExecutor/GetMarketData",
            request_serializer=trading__pb2.MarketDataRequest.SerializeToString,
            response_deserializer=trading__pb2.MarketDataResponse.FromString,
            _registered_method=True,
        )
        self.MonitorOrderStatus = channel.unary_stream(
            "/trading.TradingExecutor/MonitorOrderStatus",
            request_serializer=trading__pb2.OrderStatusRequest.SerializeToString,
            response_deserializer=trading__pb2.OrderStatusResponse.FromString,
            _registered_method=True,
        )
        self.BatchExecuteTrades = channel.unary_unary(
            "/trading.TradingExecutor/BatchExecuteTrades",
            request_serializer=trading__pb2.BatchTradeRequest.SerializeToString,
            response_deserializer=trading__pb2.BatchTradeResponse.FromString,
            _registered_method=True,
        )


class TradingExecutorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteTrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetMarketData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MonitorOrderStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BatchExecuteTrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TradingExecutorServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ExecuteTrade": grpc.unary_unary_rpc_method_handler(
            servicer.ExecuteTrade,
            request_deserializer=trading__pb2.TradeRequest.FromString,
            response_serializer=trading__pb2.TradeResponse.SerializeToString,
        ),
        "GetMarketData": grpc.unary_stream_rpc_method_handler(
            servicer.GetMarketData,
            request_deserializer=trading__pb2.MarketDataRequest.FromString,
            response_serializer=trading__pb2.MarketDataResponse.SerializeToString,
        ),
        "MonitorOrderStatus": grpc.unary_stream_rpc_method_handler(
            servicer.MonitorOrderStatus,
            request_deserializer=trading__pb2.OrderStatusRequest.FromString,
            response_serializer=trading__pb2.OrderStatusResponse.SerializeToString,
        ),
        "BatchExecuteTrades": grpc.unary_unary_rpc_method_handler(
            servicer.BatchExecuteTrades,
            request_deserializer=trading__pb2.BatchTradeRequest.FromString,
            response_serializer=trading__pb2.BatchTradeResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "trading.TradingExecutor", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "trading.TradingExecutor", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class TradingExecutor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteTrade(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trading.TradingExecutor/ExecuteTrade",
            trading__pb2.TradeRequest.SerializeToString,
            trading__pb2.TradeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetMarketData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/trading.TradingExecutor/GetMarketData",
            trading__pb2.MarketDataRequest.SerializeToString,
            trading__pb2.MarketDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def MonitorOrderStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/trading.TradingExecutor/MonitorOrderStatus",
            trading__pb2.OrderStatusRequest.SerializeToString,
            trading__pb2.OrderStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def BatchExecuteTrades(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/trading.TradingExecutor/BatchExecuteTrades",
            trading__pb2.BatchTradeRequest.SerializeToString,
            trading__pb2.BatchTradeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
