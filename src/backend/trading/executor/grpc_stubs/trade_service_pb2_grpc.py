# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc
import trade_service_pb2 as trade__service__pb2

GRPC_GENERATED_VERSION = "1.70.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in trade_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class TradeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMarketData = channel.unary_unary(
            "/tradingbot.TradeService/GetMarketData",
            request_serializer=trade__service__pb2.MarketDataRequest.SerializeToString,
            response_deserializer=trade__service__pb2.MarketDataReply.FromString,
            _registered_method=True,
        )
        self.ExecuteTrade = channel.unary_unary(
            "/tradingbot.TradeService/ExecuteTrade",
            request_serializer=trade__service__pb2.TradeRequest.SerializeToString,
            response_deserializer=trade__service__pb2.TradeReply.FromString,
            _registered_method=True,
        )
        self.GetOrderStatus = channel.unary_unary(
            "/tradingbot.TradeService/GetOrderStatus",
            request_serializer=trade__service__pb2.OrderStatusRequest.SerializeToString,
            response_deserializer=trade__service__pb2.OrderStatusReply.FromString,
            _registered_method=True,
        )
        self.SubscribePriceUpdates = channel.unary_stream(
            "/tradingbot.TradeService/SubscribePriceUpdates",
            request_serializer=trade__service__pb2.PriceSubscriptionRequest.SerializeToString,
            response_deserializer=trade__service__pb2.PriceUpdateReply.FromString,
            _registered_method=True,
        )


class TradeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMarketData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ExecuteTrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOrderStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SubscribePriceUpdates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TradeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetMarketData": grpc.unary_unary_rpc_method_handler(
            servicer.GetMarketData,
            request_deserializer=trade__service__pb2.MarketDataRequest.FromString,
            response_serializer=trade__service__pb2.MarketDataReply.SerializeToString,
        ),
        "ExecuteTrade": grpc.unary_unary_rpc_method_handler(
            servicer.ExecuteTrade,
            request_deserializer=trade__service__pb2.TradeRequest.FromString,
            response_serializer=trade__service__pb2.TradeReply.SerializeToString,
        ),
        "GetOrderStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetOrderStatus,
            request_deserializer=trade__service__pb2.OrderStatusRequest.FromString,
            response_serializer=trade__service__pb2.OrderStatusReply.SerializeToString,
        ),
        "SubscribePriceUpdates": grpc.unary_stream_rpc_method_handler(
            servicer.SubscribePriceUpdates,
            request_deserializer=trade__service__pb2.PriceSubscriptionRequest.FromString,
            response_serializer=trade__service__pb2.PriceUpdateReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "tradingbot.TradeService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "tradingbot.TradeService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class TradeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMarketData(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tradingbot.TradeService/GetMarketData",
            trade__service__pb2.MarketDataRequest.SerializeToString,
            trade__service__pb2.MarketDataReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ExecuteTrade(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tradingbot.TradeService/ExecuteTrade",
            trade__service__pb2.TradeRequest.SerializeToString,
            trade__service__pb2.TradeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetOrderStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/tradingbot.TradeService/GetOrderStatus",
            trade__service__pb2.OrderStatusRequest.SerializeToString,
            trade__service__pb2.OrderStatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SubscribePriceUpdates(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/tradingbot.TradeService/SubscribePriceUpdates",
            trade__service__pb2.PriceSubscriptionRequest.SerializeToString,
            trade__service__pb2.PriceUpdateReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
