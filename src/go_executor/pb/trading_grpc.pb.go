// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: trading.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TradingExecutor_ExecuteTrade_FullMethodName       = "/trading.TradingExecutor/ExecuteTrade"
	TradingExecutor_GetMarketData_FullMethodName      = "/trading.TradingExecutor/GetMarketData"
	TradingExecutor_MonitorOrderStatus_FullMethodName = "/trading.TradingExecutor/MonitorOrderStatus"
	TradingExecutor_BatchExecuteTrades_FullMethodName = "/trading.TradingExecutor/BatchExecuteTrades"
)

// TradingExecutorClient is the client API for TradingExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradingExecutorClient interface {
	ExecuteTrade(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (*TradeResponse, error)
	GetMarketData(ctx context.Context, in *MarketDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MarketDataResponse], error)
	MonitorOrderStatus(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderStatusResponse], error)
	BatchExecuteTrades(ctx context.Context, in *BatchTradeRequest, opts ...grpc.CallOption) (*BatchTradeResponse, error)
}

type tradingExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewTradingExecutorClient(cc grpc.ClientConnInterface) TradingExecutorClient {
	return &tradingExecutorClient{cc}
}

func (c *tradingExecutorClient) ExecuteTrade(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (*TradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TradeResponse)
	err := c.cc.Invoke(ctx, TradingExecutor_ExecuteTrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradingExecutorClient) GetMarketData(ctx context.Context, in *MarketDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MarketDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradingExecutor_ServiceDesc.Streams[0], TradingExecutor_GetMarketData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MarketDataRequest, MarketDataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingExecutor_GetMarketDataClient = grpc.ServerStreamingClient[MarketDataResponse]

func (c *tradingExecutorClient) MonitorOrderStatus(ctx context.Context, in *OrderStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TradingExecutor_ServiceDesc.Streams[1], TradingExecutor_MonitorOrderStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OrderStatusRequest, OrderStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingExecutor_MonitorOrderStatusClient = grpc.ServerStreamingClient[OrderStatusResponse]

func (c *tradingExecutorClient) BatchExecuteTrades(ctx context.Context, in *BatchTradeRequest, opts ...grpc.CallOption) (*BatchTradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchTradeResponse)
	err := c.cc.Invoke(ctx, TradingExecutor_BatchExecuteTrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradingExecutorServer is the server API for TradingExecutor service.
// All implementations must embed UnimplementedTradingExecutorServer
// for forward compatibility.
type TradingExecutorServer interface {
	ExecuteTrade(context.Context, *TradeRequest) (*TradeResponse, error)
	GetMarketData(*MarketDataRequest, grpc.ServerStreamingServer[MarketDataResponse]) error
	MonitorOrderStatus(*OrderStatusRequest, grpc.ServerStreamingServer[OrderStatusResponse]) error
	BatchExecuteTrades(context.Context, *BatchTradeRequest) (*BatchTradeResponse, error)
	mustEmbedUnimplementedTradingExecutorServer()
}

// UnimplementedTradingExecutorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTradingExecutorServer struct{}

func (UnimplementedTradingExecutorServer) ExecuteTrade(context.Context, *TradeRequest) (*TradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTrade not implemented")
}
func (UnimplementedTradingExecutorServer) GetMarketData(*MarketDataRequest, grpc.ServerStreamingServer[MarketDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetMarketData not implemented")
}
func (UnimplementedTradingExecutorServer) MonitorOrderStatus(*OrderStatusRequest, grpc.ServerStreamingServer[OrderStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method MonitorOrderStatus not implemented")
}
func (UnimplementedTradingExecutorServer) BatchExecuteTrades(context.Context, *BatchTradeRequest) (*BatchTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchExecuteTrades not implemented")
}
func (UnimplementedTradingExecutorServer) mustEmbedUnimplementedTradingExecutorServer() {}
func (UnimplementedTradingExecutorServer) testEmbeddedByValue()                         {}

// UnsafeTradingExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradingExecutorServer will
// result in compilation errors.
type UnsafeTradingExecutorServer interface {
	mustEmbedUnimplementedTradingExecutorServer()
}

func RegisterTradingExecutorServer(s grpc.ServiceRegistrar, srv TradingExecutorServer) {
	// If the following call pancis, it indicates UnimplementedTradingExecutorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TradingExecutor_ServiceDesc, srv)
}

func _TradingExecutor_ExecuteTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingExecutorServer).ExecuteTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingExecutor_ExecuteTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingExecutorServer).ExecuteTrade(ctx, req.(*TradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradingExecutor_GetMarketData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarketDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingExecutorServer).GetMarketData(m, &grpc.GenericServerStream[MarketDataRequest, MarketDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingExecutor_GetMarketDataServer = grpc.ServerStreamingServer[MarketDataResponse]

func _TradingExecutor_MonitorOrderStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TradingExecutorServer).MonitorOrderStatus(m, &grpc.GenericServerStream[OrderStatusRequest, OrderStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TradingExecutor_MonitorOrderStatusServer = grpc.ServerStreamingServer[OrderStatusResponse]

func _TradingExecutor_BatchExecuteTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradingExecutorServer).BatchExecuteTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TradingExecutor_BatchExecuteTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradingExecutorServer).BatchExecuteTrades(ctx, req.(*BatchTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradingExecutor_ServiceDesc is the grpc.ServiceDesc for TradingExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradingExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trading.TradingExecutor",
	HandlerType: (*TradingExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTrade",
			Handler:    _TradingExecutor_ExecuteTrade_Handler,
		},
		{
			MethodName: "BatchExecuteTrades",
			Handler:    _TradingExecutor_BatchExecuteTrades_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMarketData",
			Handler:       _TradingExecutor_GetMarketData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorOrderStatus",
			Handler:       _TradingExecutor_MonitorOrderStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "trading.proto",
}
