name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  TEST_POSTGRES_USER: testuser
  TEST_POSTGRES_PASSWORD: testpass
  TEST_POSTGRES_DB: tradingdb_test
  TEST_REDIS_PASSWORD: testpass

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Start test environment
        run: |
          cd src/deployment
          docker-compose -f docker-compose.test.yml up -d

      - name: Run tests
        run: |
          cd src/deployment
          docker-compose -f docker-compose.test.yml run solana_tests pytest
          docker-compose -f docker-compose.test.yml run pump_tests pytest

      - name: Generate coverage report
        run: |
          cd src/deployment
          docker-compose -f docker-compose.test.yml run coverage-report

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./src/deployment/reports/coverage.xml
          fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy

      - name: Run black
        run: black . --check

      - name: Run flake8
        run: flake8 .

      - name: Run mypy
        run: mypy .

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Bandit
        run: |
          pip install bandit
          bandit -r . -ll

  build:
    needs: [test, lint, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Trading Bot
        uses: docker/build-push-action@v2
        with:
          context: ./go-migration
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/trading-bot:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository }}/trading-bot:latest

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to staging
        run: |
          cd src/deployment
          ./scripts/deploy.sh staging

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to production
        run: |
          cd src/deployment
          ./scripts/deploy.sh production

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
