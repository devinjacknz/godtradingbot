events {
    worker_connections 1024;
}

http {
    # 基础设置
    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    tcp_nopush    on;
    tcp_nodelay   on;

    # 缓存设置
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=24h max_size=1g;
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=API:10m inactive=1h max_size=500m;

    # Gzip 压缩
    gzip on;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_vary on;

    # 安全headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # 上游服务器配置
    upstream backend_servers {
        server backend:8000;
        keepalive 32;
    }

    upstream frontend_servers {
        server frontend:3000;
        keepalive 32;
    }

    # CDN 配置
    map $http_user_agent $cdn_cache_bypass {
        default 0;
        "~*GoogleBot" 1;
        "~*Baiduspider" 1;
    }

    server {
        listen 80;
        server_name tradingbot.example.com;

        # SSL 配置（生产环境使用）
        # listen 443 ssl http2;
        # ssl_certificate /etc/nginx/ssl/tradingbot.crt;
        # ssl_certificate_key /etc/nginx/ssl/tradingbot.key;
        # ssl_session_timeout 1d;
        # ssl_session_cache shared:SSL:50m;
        # ssl_session_tickets off;
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        # ssl_prefer_server_ciphers off;

        # 静态文件缓存
        location /static/ {
            proxy_cache STATIC;
            proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
            proxy_cache_valid 200 24h;
            proxy_cache_valid 404 1m;
            proxy_cache_bypass $cdn_cache_bypass;
            proxy_cache_revalidate on;
            proxy_cache_min_uses 1;
            add_header X-Cache-Status $upstream_cache_status;

            proxy_pass http://frontend_servers;
            expires 30d;
            access_log off;
        }

        # API 缓存
        location /api/ {
            proxy_cache API;
            proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
            proxy_cache_valid 200 1h;
            proxy_cache_valid 404 1m;
            proxy_cache_methods GET HEAD;
            proxy_cache_bypass $http_cache_control;
            proxy_cache_revalidate on;
            add_header X-Cache-Status $upstream_cache_status;

            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
        }

        # WebSocket 配置
        location /ws/ {
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 前端应用
        location / {
            proxy_pass http://frontend_servers;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            
            # 单页应用路由支持
            try_files $uri $uri/ /index.html;
        }

        # 健康检查
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 'healthy\n';
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
} 