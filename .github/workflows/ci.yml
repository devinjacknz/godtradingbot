name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  verify-structure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Verify Project Structure
        run: |
          chmod +x scripts/verification/verify_structure.sh
          ./scripts/verification/verify_structure.sh

  test-backend:
    needs: verify-structure
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
      postgres:
        image: postgres:12
        env:
          POSTGRES_DB: tradingbot_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_INITDB_ARGS: "--auth-host=trust --auth-local=trust"
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'pip'
          
      - name: Initialize Database
        run: |
          cd src/backend
          python init_database.py
        env:
          POSTGRES_DB: tradingbot_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
      
      - name: Install Backend Dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest pytest-cov pytest-asyncio motor pyjwt nest-asyncio pytest-env
          cd src/backend
          pip install -e .
        env:
          PYTHONPATH: ${{ github.workspace }}/src/backend
          DEBUG: "true"
          JWT_SECRET_KEY: "test_secret_key"
          JWT_ALGORITHM: "HS256"
      
      - name: Run Backend Tests
        run: |
          cd src/backend
          python -m pytest -v tests/ --cov=. --cov-report=xml
        env:
          POSTGRES_DB: tradingbot_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          MONGODB_URL: mongodb://localhost:27017/
          REDIS_URL: redis://localhost:6379/0
          PYTHONPATH: ${{ github.workspace }}/src/backend
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend

  test-frontend:
    needs: verify-structure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.18.0'
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json
      
      - name: Install Frontend Dependencies
        working-directory: src/frontend
        run: npm ci
      
      - name: Run Frontend Tests
        working-directory: src/frontend
        run: |
          npm run test -- --coverage
          npm run lint
      
      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./src/frontend/coverage/coverage-final.json
          flags: frontend

  build:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and Push Backend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deploy/docker/Dockerfile.api
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/trading-bot-api:${{ github.sha }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/trading-bot-api:latest
      
      - name: Build and Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: src/frontend
          file: src/frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/trading-bot-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_HUB_USERNAME }}/trading-bot-frontend:latest

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to Staging
        run: |
          chmod +x scripts/deployment/deploy.sh
          ./scripts/deployment/deploy.sh staging

  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to Production
        run: |
          chmod +x scripts/deployment/deploy.sh
          ./scripts/deployment/deploy.sh production
