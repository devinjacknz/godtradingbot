services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: tradingbot
      POSTGRES_PASSWORD: tradingbot
      POSTGRES_DB: tradingbot
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradingbot"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  api_gateway:
    build:
      context: ..
      dockerfile: docker/backend/Dockerfile
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql+asyncpg://tradingbot:tradingbot@postgres:5432/tradingbot
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ..
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "3002:80"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - api_gateway

  test:
    build:
      context: ..
      dockerfile: docker/backend/Dockerfile
    volumes:
      - ../tests:/app/tests
      - ../src:/app/src
      - ../alembic:/app/alembic
      - ../alembic.ini:/app/alembic.ini
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql+asyncpg://tradingbot:tradingbot@postgres:5432/tradingbot
      - MONGODB_URL=mongodb://mongodb:27017
      - REDIS_URL=redis://redis:6379/0
    command: >
      bash -c "
        sleep 5 &&
        alembic upgrade head &&
        pytest tests/test_database.py -v
      "
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  mongodb_data:
