{"ast":null,"code":"import _objectSpread from\"/home/ubuntu/repos/tradingbot/src/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import axios,{AxiosHeaders}from'axios';// API Response Types\nclass ApiClient{constructor(){this.client=void 0;this.client=axios.create({baseURL:\"\".concat(process.env.REACT_APP_API_URL||'http://localhost:8000',\"/api/v1\"),headers:{'Content-Type':'application/json'}});// Add request interceptor to include JWT token and handle token refresh\nthis.client.interceptors.request.use(async config=>{const token=localStorage.getItem('token');const tokenExpiry=localStorage.getItem('token_expiry');if(token&&tokenExpiry){var _config$url;// Check if token is about to expire (within 5 minutes)\nconst expiryTime=parseInt(tokenExpiry);const currentTime=Date.now();const timeToExpiry=expiryTime-currentTime;console.log('Token status in request interceptor:',{currentTime:new Date(currentTime).toISOString(),expiryTime:new Date(expiryTime).toISOString(),timeToExpiry:Math.floor(timeToExpiry/1000)+' seconds'});if(currentTime+5*60*1000>=expiryTime&&!((_config$url=config.url)!==null&&_config$url!==void 0&&_config$url.includes('/auth/refresh'))){console.log('Token refresh needed in request interceptor');try{var _response$data;const response=await this.refreshToken();if(response.success&&(_response$data=response.data)!==null&&_response$data!==void 0&&_response$data.access_token){// Update tokens in localStorage\nlocalStorage.setItem('token',response.data.access_token);localStorage.setItem('token_expiry',String(Date.now()+response.data.expires_in*1000));// Verify token storage\nconst newToken=localStorage.getItem('token');const newExpiry=localStorage.getItem('token_expiry');if(!newToken||!newExpiry){console.error('Failed to store refreshed tokens in request interceptor');localStorage.removeItem('token');localStorage.removeItem('token_expiry');window.location.href='/login';return Promise.reject(new Error('Failed to store authentication tokens'));}config.headers.Authorization=\"Bearer \".concat(newToken);return config;}}catch(error){console.error('Token refresh failed in request interceptor:',error);// Clear tokens and redirect to login if refresh fails\nlocalStorage.removeItem('token');localStorage.removeItem('token_expiry');window.location.href='/login';return Promise.reject(error);}}config.headers.Authorization=\"Bearer \".concat(token);}return config;});// Add response interceptor for error handling with enhanced logging and token verification\nthis.client.interceptors.response.use(response=>response,async error=>{var _error$response,_error$response2,_originalRequest$url;const originalRequest=error.config;console.log('Response error intercepted:',{status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,url:originalRequest===null||originalRequest===void 0?void 0:originalRequest.url,method:originalRequest===null||originalRequest===void 0?void 0:originalRequest.method});if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===401&&originalRequest&&!((_originalRequest$url=originalRequest.url)!==null&&_originalRequest$url!==void 0&&_originalRequest$url.includes('/auth/refresh'))){console.log('Unauthorized error detected, attempting token refresh');try{var _response$data2;const response=await this.refreshToken();if(response.success&&(_response$data2=response.data)!==null&&_response$data2!==void 0&&_response$data2.access_token){// Update tokens in localStorage\nlocalStorage.setItem('token',response.data.access_token);localStorage.setItem('token_expiry',String(Date.now()+response.data.expires_in*1000));// Verify token storage\nconst newToken=localStorage.getItem('token');const newExpiry=localStorage.getItem('token_expiry');if(!newToken||!newExpiry){console.error('Failed to store refreshed tokens in response interceptor');localStorage.removeItem('token');localStorage.removeItem('token_expiry');window.location.href='/login';return Promise.reject(new Error('Failed to store authentication tokens'));}console.log('Token refresh successful, retrying original request');// Retry the original request with new token\nconst newRequest=_objectSpread({},originalRequest);if(newRequest.headers instanceof Object){newRequest.headers=new AxiosHeaders(_objectSpread(_objectSpread({},originalRequest.headers),{},{Authorization:\"Bearer \".concat(newToken)}));}return this.client.request(newRequest);}}catch(refreshError){console.error('Token refresh failed in response interceptor:',refreshError);// Clear tokens before redirecting\nlocalStorage.removeItem('token');localStorage.removeItem('token_expiry');}console.log('Authentication failed, redirecting to login');// If refresh failed, redirect to login\nwindow.location.href='/login';}return Promise.reject(error);});}// Auth Management\nasync signup(data){try{console.log('Attempting signup:',{email:data.email,username:data.username});const formData=new FormData();formData.append('email',data.email);formData.append('username',data.username);formData.append('password',data.password);const response=await this.client.post('/auth/signup',formData,{headers:{'Content-Type':'application/x-www-form-urlencoded'}});if(response.data.access_token){// Set tokens in localStorage\nlocalStorage.setItem('token',response.data.access_token);localStorage.setItem('token_expiry',String(Date.now()+response.data.expires_in*1000));// Verify token storage\nconst token=localStorage.getItem('token');const tokenExpiry=localStorage.getItem('token_expiry');if(!token||!tokenExpiry){console.error('Failed to store tokens after signup');localStorage.removeItem('token');localStorage.removeItem('token_expiry');throw new Error('Failed to store authentication tokens');}console.log('Signup successful, tokens stored');return{data:response.data,success:true};}console.error('Signup response missing access token');return{error:'Invalid server response',success:false};}catch(error){const errorMessage=this.handleError(error);console.error('Signup error:',errorMessage);// Ensure no partial auth state remains\nlocalStorage.removeItem('token');localStorage.removeItem('token_expiry');return{error:errorMessage,success:false};}}async login(data){try{console.log('Attempting login:',{username:data.username});const formData=new URLSearchParams();formData.append('username',data.username);formData.append('password',data.password);formData.append('grant_type','password');const response=await this.client.post('/auth/login',formData.toString(),{headers:{'Content-Type':'application/x-www-form-urlencoded'},withCredentials:true// Required for cookies\n});if(response.data.access_token){// Set tokens in localStorage\nlocalStorage.setItem('token',response.data.access_token);localStorage.setItem('token_expiry',String(Date.now()+response.data.expires_in*1000));// Verify token storage\nconst token=localStorage.getItem('token');const tokenExpiry=localStorage.getItem('token_expiry');if(!token||!tokenExpiry){console.error('Failed to store tokens after login');localStorage.removeItem('token');localStorage.removeItem('token_expiry');throw new Error('Failed to store authentication tokens');}console.log('Login successful, tokens stored');return{data:response.data,success:true};}console.error('Login response missing access token');return{error:'Invalid server response',success:false};}catch(error){const errorMessage=this.handleError(error);console.error('Login error:',errorMessage);// Ensure no partial auth state remains\nlocalStorage.removeItem('token');localStorage.removeItem('token_expiry');return{error:errorMessage,success:false};}}async refreshToken(){try{console.log('Attempting token refresh');const response=await this.client.post('/auth/refresh',{},{withCredentials:true});if(response.data.access_token){// Set tokens in localStorage\nlocalStorage.setItem('token',response.data.access_token);localStorage.setItem('token_expiry',String(Date.now()+response.data.expires_in*1000));// Verify token storage\nconst token=localStorage.getItem('token');const tokenExpiry=localStorage.getItem('token_expiry');if(!token||!tokenExpiry){console.error('Failed to store tokens after refresh');localStorage.removeItem('token');localStorage.removeItem('token_expiry');throw new Error('Failed to store authentication tokens');}console.log('Token refresh successful');return{data:response.data,success:true};}console.error('Refresh response missing access token');return{error:'Invalid server response',success:false};}catch(error){const errorMessage=this.handleError(error);console.error('Token refresh error:',errorMessage);// Ensure no partial auth state remains\nlocalStorage.removeItem('token');localStorage.removeItem('token_expiry');return{error:errorMessage,success:false};}}async logout(){try{console.log('Attempting logout');await this.client.post('/auth/logout',{},{withCredentials:true});// Clear all authentication state\nlocalStorage.removeItem('token');localStorage.removeItem('token_expiry');// Verify cleanup\nconst token=localStorage.getItem('token');const tokenExpiry=localStorage.getItem('token_expiry');if(token||tokenExpiry){console.error('Failed to clear authentication state');// Force clear again\nlocalStorage.removeItem('token');localStorage.removeItem('token_expiry');}console.log('Logout successful');return{success:true};}catch(error){const errorMessage=this.handleError(error);console.error('Logout error:',errorMessage);// Ensure auth state is cleared even on error\nlocalStorage.removeItem('token');localStorage.removeItem('token_expiry');return{error:errorMessage,success:false};}}// Agent Management\nasync getAgentStatus(agentType){try{const response=await this.client.get(\"/agents/\".concat(agentType,\"/status\"));return{data:response.data,success:true};}catch(error){return{error:this.handleError(error),success:false};}}async startAgent(agentType){try{await this.client.post(\"/agents/\".concat(agentType,\"/start\"));return{success:true};}catch(error){return{error:this.handleError(error),success:false};}}async stopAgent(agentType){try{await this.client.post(\"/agents/\".concat(agentType,\"/stop\"));return{success:true};}catch(error){return{error:this.handleError(error),success:false};}}// Strategy Management\nasync createStrategy(strategy){try{const response=await this.client.post('/strategies/trading/create',strategy);return{data:response.data,success:true};}catch(error){return{error:this.handleError(error),success:false};}}async getStrategies(){try{const response=await this.client.get('/strategies');return{data:response.data,success:true};}catch(error){return{error:this.handleError(error),success:false};}}// Wallet Management\nasync createWallet(name){try{const response=await this.client.post('/wallet/create',{name});return{data:response.data,success:true};}catch(error){return{error:this.handleError(error),success:false};}}async confirmWallet(walletAddress){try{await this.client.post('/wallet/confirm',{walletAddress,confirmed:true});return{success:true};}catch(error){return{error:this.handleError(error),success:false};}}async getWalletBalance(walletAddress){try{const response=await this.client.get(\"/wallet/balance/\".concat(walletAddress));return{data:response.data.balance,success:true};}catch(error){return{error:this.handleError(error),success:false};}}async getWalletTransactions(walletAddress){try{const response=await this.client.get(\"/wallet/transactions/\".concat(walletAddress));return{data:response.data,success:true};}catch(error){return{error:this.handleError(error),success:false};}}handleError(error){var _error$response3,_error$response4,_error$response5,_error$response6,_error$response7,_error$response8,_error$response9,_error$response9$data,_error$response10,_error$response11;console.error('API Error:',{status:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status,statusText:(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.statusText,data:(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data,message:error.message,code:error.code});// Handle authentication errors\nif(((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status)===401){return'Authentication failed. Please log in again.';}if(((_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.status)===403){return'You do not have permission to perform this action.';}// Handle validation errors\nif(((_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.status)===422){var _error$response$data,_error$response$data2;const validationErrors=(_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail;if(Array.isArray(validationErrors)){return validationErrors.map(err=>err.msg).join(', ');}return((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.detail)||'Invalid input data provided.';}// Handle API error responses with detail\nif((_error$response9=error.response)!==null&&_error$response9!==void 0&&(_error$response9$data=_error$response9.data)!==null&&_error$response9$data!==void 0&&_error$response9$data.detail){return error.response.data.detail;}// Handle network errors\nif(error.message==='Network Error'){return'Unable to connect to server. Please check your internet connection.';}// Handle timeout errors\nif(error.code==='ECONNABORTED'){return'Request timed out. Please try again.';}// Handle rate limiting\nif(((_error$response10=error.response)===null||_error$response10===void 0?void 0:_error$response10.status)===429){return'Too many requests. Please try again later.';}// Handle server errors\nif(((_error$response11=error.response)===null||_error$response11===void 0?void 0:_error$response11.status)>=500){return'Server error occurred. Please try again later.';}// Handle other axios errors\nif(error.message){return error.message;}return'An unexpected error occurred. Please try again.';}}export const apiClient=new ApiClient();export default apiClient;","map":{"version":3,"names":["axios","AxiosHeaders","ApiClient","constructor","client","create","baseURL","concat","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","tokenExpiry","_config$url","expiryTime","parseInt","currentTime","Date","now","timeToExpiry","console","log","toISOString","Math","floor","url","includes","_response$data","response","refreshToken","success","data","access_token","setItem","String","expires_in","newToken","newExpiry","error","removeItem","window","location","href","Promise","reject","Error","Authorization","_error$response","_error$response2","_originalRequest$url","originalRequest","status","method","_response$data2","newRequest","_objectSpread","Object","refreshError","signup","email","username","formData","FormData","append","password","post","errorMessage","handleError","login","URLSearchParams","toString","withCredentials","logout","getAgentStatus","agentType","get","startAgent","stopAgent","createStrategy","strategy","getStrategies","createWallet","name","confirmWallet","walletAddress","confirmed","getWalletBalance","balance","getWalletTransactions","_error$response3","_error$response4","_error$response5","_error$response6","_error$response7","_error$response8","_error$response9","_error$response9$data","_error$response10","_error$response11","statusText","message","code","_error$response$data","_error$response$data2","validationErrors","detail","Array","isArray","map","err","msg","join","apiClient"],"sources":["/home/ubuntu/repos/tradingbot/src/frontend/src/api/client.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosError, AxiosHeaders } from 'axios';\n\n// API Response Types\nexport interface ApiResponse<T> {\n  data?: T;\n  error?: string;\n  success: boolean;\n}\n\nexport interface AuthResponse {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n}\n\nexport interface SignupData {\n  email: string;\n  username: string;\n  password: string;\n}\n\nexport interface LoginData {\n  username: string;\n  password: string;\n}\n\nexport interface AgentResponse {\n  id: string;\n  type: 'trading' | 'defi';\n  status: 'running' | 'stopped' | 'error';\n  lastUpdated: string;\n}\n\nexport interface StrategyResponse {\n  id: string;\n  name: string;\n  type: string;\n  parameters: Record<string, any>;\n  status: 'active' | 'inactive';\n  createdAt: string;\n}\n\nexport interface WalletResponse {\n  address: string;\n  publicKey: string;\n  balance: string;\n  transactions: Array<{\n    hash: string;\n    type: string;\n    amount: string;\n    status: string;\n    timestamp: string;\n  }>;\n}\n\nclass ApiClient {\n  private client: AxiosInstance;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/api/v1`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Add request interceptor to include JWT token and handle token refresh\n    this.client.interceptors.request.use(async (config) => {\n      const token = localStorage.getItem('token');\n      const tokenExpiry = localStorage.getItem('token_expiry');\n      \n      if (token && tokenExpiry) {\n        // Check if token is about to expire (within 5 minutes)\n        const expiryTime = parseInt(tokenExpiry);\n        const currentTime = Date.now();\n        const timeToExpiry = expiryTime - currentTime;\n        \n        console.log('Token status in request interceptor:', {\n          currentTime: new Date(currentTime).toISOString(),\n          expiryTime: new Date(expiryTime).toISOString(),\n          timeToExpiry: Math.floor(timeToExpiry / 1000) + ' seconds'\n        });\n        \n        if (currentTime + 5 * 60 * 1000 >= expiryTime && !config.url?.includes('/auth/refresh')) {\n          console.log('Token refresh needed in request interceptor');\n          try {\n            const response = await this.refreshToken();\n            if (response.success && response.data?.access_token) {\n              // Update tokens in localStorage\n              localStorage.setItem('token', response.data.access_token);\n              localStorage.setItem('token_expiry', String(Date.now() + (response.data.expires_in * 1000)));\n              \n              // Verify token storage\n              const newToken = localStorage.getItem('token');\n              const newExpiry = localStorage.getItem('token_expiry');\n              \n              if (!newToken || !newExpiry) {\n                console.error('Failed to store refreshed tokens in request interceptor');\n                localStorage.removeItem('token');\n                localStorage.removeItem('token_expiry');\n                window.location.href = '/login';\n                return Promise.reject(new Error('Failed to store authentication tokens'));\n              }\n              \n              config.headers.Authorization = `Bearer ${newToken}`;\n              return config;\n            }\n          } catch (error) {\n            console.error('Token refresh failed in request interceptor:', error);\n            // Clear tokens and redirect to login if refresh fails\n            localStorage.removeItem('token');\n            localStorage.removeItem('token_expiry');\n            window.location.href = '/login';\n            return Promise.reject(error);\n          }\n        }\n        \n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Add response interceptor for error handling with enhanced logging and token verification\n    this.client.interceptors.response.use(\n      (response) => response,\n      async (error: AxiosError) => {\n        const originalRequest = error.config;\n        console.log('Response error intercepted:', {\n          status: error.response?.status,\n          url: originalRequest?.url,\n          method: originalRequest?.method\n        });\n        \n        if (error.response?.status === 401 && originalRequest && !originalRequest.url?.includes('/auth/refresh')) {\n          console.log('Unauthorized error detected, attempting token refresh');\n          try {\n            const response = await this.refreshToken();\n            if (response.success && response.data?.access_token) {\n              // Update tokens in localStorage\n              localStorage.setItem('token', response.data.access_token);\n              localStorage.setItem('token_expiry', String(Date.now() + (response.data.expires_in * 1000)));\n              \n              // Verify token storage\n              const newToken = localStorage.getItem('token');\n              const newExpiry = localStorage.getItem('token_expiry');\n              \n              if (!newToken || !newExpiry) {\n                console.error('Failed to store refreshed tokens in response interceptor');\n                localStorage.removeItem('token');\n                localStorage.removeItem('token_expiry');\n                window.location.href = '/login';\n                return Promise.reject(new Error('Failed to store authentication tokens'));\n              }\n              \n              console.log('Token refresh successful, retrying original request');\n              // Retry the original request with new token\n              const newRequest = { ...originalRequest };\n              if (newRequest.headers instanceof Object) {\n                newRequest.headers = new AxiosHeaders({\n                  ...originalRequest.headers,\n                  Authorization: `Bearer ${newToken}`\n                });\n              }\n              return this.client.request(newRequest);\n            }\n          } catch (refreshError) {\n            console.error('Token refresh failed in response interceptor:', refreshError);\n            // Clear tokens before redirecting\n            localStorage.removeItem('token');\n            localStorage.removeItem('token_expiry');\n          }\n          \n          console.log('Authentication failed, redirecting to login');\n          // If refresh failed, redirect to login\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Auth Management\n  async signup(data: SignupData): Promise<ApiResponse<AuthResponse>> {\n    try {\n      console.log('Attempting signup:', { email: data.email, username: data.username });\n      const formData = new FormData();\n      formData.append('email', data.email);\n      formData.append('username', data.username);\n      formData.append('password', data.password);\n      \n      const response = await this.client.post('/auth/signup', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n      \n      if (response.data.access_token) {\n        // Set tokens in localStorage\n        localStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('token_expiry', String(Date.now() + (response.data.expires_in * 1000)));\n        \n        // Verify token storage\n        const token = localStorage.getItem('token');\n        const tokenExpiry = localStorage.getItem('token_expiry');\n        \n        if (!token || !tokenExpiry) {\n          console.error('Failed to store tokens after signup');\n          localStorage.removeItem('token');\n          localStorage.removeItem('token_expiry');\n          throw new Error('Failed to store authentication tokens');\n        }\n        \n        console.log('Signup successful, tokens stored');\n        return { data: response.data, success: true };\n      }\n      \n      console.error('Signup response missing access token');\n      return { error: 'Invalid server response', success: false };\n    } catch (error) {\n      const errorMessage = this.handleError(error);\n      console.error('Signup error:', errorMessage);\n      // Ensure no partial auth state remains\n      localStorage.removeItem('token');\n      localStorage.removeItem('token_expiry');\n      return { error: errorMessage, success: false };\n    }\n  }\n\n  async login(data: LoginData): Promise<ApiResponse<AuthResponse>> {\n    try {\n      console.log('Attempting login:', { username: data.username });\n      const formData = new URLSearchParams();\n      formData.append('username', data.username);\n      formData.append('password', data.password);\n      formData.append('grant_type', 'password');\n      \n      const response = await this.client.post('/auth/login', formData.toString(), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        withCredentials: true, // Required for cookies\n      });\n      \n      if (response.data.access_token) {\n        // Set tokens in localStorage\n        localStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('token_expiry', String(Date.now() + (response.data.expires_in * 1000)));\n        \n        // Verify token storage\n        const token = localStorage.getItem('token');\n        const tokenExpiry = localStorage.getItem('token_expiry');\n        \n        if (!token || !tokenExpiry) {\n          console.error('Failed to store tokens after login');\n          localStorage.removeItem('token');\n          localStorage.removeItem('token_expiry');\n          throw new Error('Failed to store authentication tokens');\n        }\n        \n        console.log('Login successful, tokens stored');\n        return { data: response.data, success: true };\n      }\n      \n      console.error('Login response missing access token');\n      return { error: 'Invalid server response', success: false };\n    } catch (error) {\n      const errorMessage = this.handleError(error);\n      console.error('Login error:', errorMessage);\n      // Ensure no partial auth state remains\n      localStorage.removeItem('token');\n      localStorage.removeItem('token_expiry');\n      return { error: errorMessage, success: false };\n    }\n  }\n\n  async refreshToken(): Promise<ApiResponse<AuthResponse>> {\n    try {\n      console.log('Attempting token refresh');\n      const response = await this.client.post('/auth/refresh', {}, {\n        withCredentials: true,\n      });\n      \n      if (response.data.access_token) {\n        // Set tokens in localStorage\n        localStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('token_expiry', String(Date.now() + (response.data.expires_in * 1000)));\n        \n        // Verify token storage\n        const token = localStorage.getItem('token');\n        const tokenExpiry = localStorage.getItem('token_expiry');\n        \n        if (!token || !tokenExpiry) {\n          console.error('Failed to store tokens after refresh');\n          localStorage.removeItem('token');\n          localStorage.removeItem('token_expiry');\n          throw new Error('Failed to store authentication tokens');\n        }\n        \n        console.log('Token refresh successful');\n        return { data: response.data, success: true };\n      }\n      \n      console.error('Refresh response missing access token');\n      return { error: 'Invalid server response', success: false };\n    } catch (error) {\n      const errorMessage = this.handleError(error);\n      console.error('Token refresh error:', errorMessage);\n      // Ensure no partial auth state remains\n      localStorage.removeItem('token');\n      localStorage.removeItem('token_expiry');\n      return { error: errorMessage, success: false };\n    }\n  }\n\n  async logout(): Promise<ApiResponse<void>> {\n    try {\n      console.log('Attempting logout');\n      await this.client.post('/auth/logout', {}, {\n        withCredentials: true,\n      });\n      \n      // Clear all authentication state\n      localStorage.removeItem('token');\n      localStorage.removeItem('token_expiry');\n      \n      // Verify cleanup\n      const token = localStorage.getItem('token');\n      const tokenExpiry = localStorage.getItem('token_expiry');\n      \n      if (token || tokenExpiry) {\n        console.error('Failed to clear authentication state');\n        // Force clear again\n        localStorage.removeItem('token');\n        localStorage.removeItem('token_expiry');\n      }\n      \n      console.log('Logout successful');\n      return { success: true };\n    } catch (error) {\n      const errorMessage = this.handleError(error);\n      console.error('Logout error:', errorMessage);\n      // Ensure auth state is cleared even on error\n      localStorage.removeItem('token');\n      localStorage.removeItem('token_expiry');\n      return { error: errorMessage, success: false };\n    }\n  }\n\n  // Agent Management\n  async getAgentStatus(agentType: string): Promise<ApiResponse<AgentResponse>> {\n    try {\n      const response = await this.client.get(`/agents/${agentType}/status`);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async startAgent(agentType: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post(`/agents/${agentType}/start`);\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async stopAgent(agentType: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post(`/agents/${agentType}/stop`);\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  // Strategy Management\n  async createStrategy(strategy: {\n    name: string;\n    promotion_words: string;\n    timeframe: string;\n    risk_level: string;\n    description: string;\n  }): Promise<ApiResponse<StrategyResponse>> {\n    try {\n      const response = await this.client.post('/strategies/trading/create', strategy);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getStrategies(): Promise<ApiResponse<StrategyResponse[]>> {\n    try {\n      const response = await this.client.get('/strategies');\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  // Wallet Management\n  async createWallet(name: string): Promise<ApiResponse<WalletResponse>> {\n    try {\n      const response = await this.client.post('/wallet/create', { name });\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async confirmWallet(walletAddress: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post('/wallet/confirm', { walletAddress, confirmed: true });\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getWalletBalance(walletAddress: string): Promise<ApiResponse<string>> {\n    try {\n      const response = await this.client.get(`/wallet/balance/${walletAddress}`);\n      return { data: response.data.balance, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getWalletTransactions(walletAddress: string): Promise<ApiResponse<WalletResponse['transactions']>> {\n    try {\n      const response = await this.client.get(`/wallet/transactions/${walletAddress}`);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  private handleError(error: any): string {\n    console.error('API Error:', {\n      status: error.response?.status,\n      statusText: error.response?.statusText,\n      data: error.response?.data,\n      message: error.message,\n      code: error.code\n    });\n\n    // Handle authentication errors\n    if (error.response?.status === 401) {\n      return 'Authentication failed. Please log in again.';\n    }\n    if (error.response?.status === 403) {\n      return 'You do not have permission to perform this action.';\n    }\n\n    // Handle validation errors\n    if (error.response?.status === 422) {\n      const validationErrors = error.response.data?.detail;\n      if (Array.isArray(validationErrors)) {\n        return validationErrors.map(err => err.msg).join(', ');\n      }\n      return error.response.data?.detail || 'Invalid input data provided.';\n    }\n\n    // Handle API error responses with detail\n    if (error.response?.data?.detail) {\n      return error.response.data.detail;\n    }\n\n    // Handle network errors\n    if (error.message === 'Network Error') {\n      return 'Unable to connect to server. Please check your internet connection.';\n    }\n\n    // Handle timeout errors\n    if (error.code === 'ECONNABORTED') {\n      return 'Request timed out. Please try again.';\n    }\n\n    // Handle rate limiting\n    if (error.response?.status === 429) {\n      return 'Too many requests. Please try again later.';\n    }\n\n    // Handle server errors\n    if (error.response?.status >= 500) {\n      return 'Server error occurred. Please try again later.';\n    }\n\n    // Handle other axios errors\n    if (error.message) {\n      return error.message;\n    }\n\n    return 'An unexpected error occurred. Please try again.';\n  }\n}\n\nexport const apiClient = new ApiClient();\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}