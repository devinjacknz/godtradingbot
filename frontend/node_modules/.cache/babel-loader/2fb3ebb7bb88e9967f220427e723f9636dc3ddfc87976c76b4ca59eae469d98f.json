{"ast":null,"code":"import axios from 'axios';\n\n// API Response Types\n\nclass ApiClient {\n  constructor() {\n    this.client = void 0;\n    this.client = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/api/v1`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Add request interceptor to include JWT token\n    this.client.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n      if (token && config.headers) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Add response interceptor for error handling\n    this.client.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        // Handle unauthorized access\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Auth Management\n  async signup(data) {\n    try {\n      const formData = new FormData();\n      formData.append('email', data.email);\n      formData.append('username', data.username);\n      formData.append('password', data.password);\n      const response = await this.client.post('/auth/signup', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n      }\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      const errorMessage = this.handleError(error);\n      console.error('API Error:', errorMessage);\n      return {\n        error: errorMessage,\n        success: false\n      };\n    }\n  }\n  async login(data) {\n    try {\n      console.log('Attempting login with:', {\n        username: data.username\n      });\n      const formData = new URLSearchParams();\n      formData.append('username', data.username);\n      formData.append('password', data.password);\n      formData.append('grant_type', 'password');\n      const response = await this.client.post('/auth/login', formData.toString(), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        withCredentials: true // Required for cookies\n      });\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async refreshToken() {\n    try {\n      const response = await this.client.post('/auth/refresh', {}, {\n        withCredentials: true\n      });\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async logout() {\n    try {\n      await this.client.post('/auth/logout', {}, {\n        withCredentials: true\n      });\n      localStorage.removeItem('token');\n      localStorage.removeItem('token_expiry');\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async logout() {\n    localStorage.removeItem('token');\n  }\n\n  // Agent Management\n  async getAgentStatus(agentType) {\n    try {\n      const response = await this.client.get(`/agents/${agentType}/status`);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async startAgent(agentType) {\n    try {\n      await this.client.post(`/agents/${agentType}/start`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async stopAgent(agentType) {\n    try {\n      await this.client.post(`/agents/${agentType}/stop`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n\n  // Strategy Management\n  async createStrategy(strategy) {\n    try {\n      const response = await this.client.post('/strategies/trading/create', strategy);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async getStrategies() {\n    try {\n      const response = await this.client.get('/strategies');\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n\n  // Wallet Management\n  async createWallet(name) {\n    try {\n      const response = await this.client.post('/wallet/create', {\n        name\n      });\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async confirmWallet(walletAddress) {\n    try {\n      await this.client.post('/wallet/confirm', {\n        walletAddress,\n        confirmed: true\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async getWalletBalance(walletAddress) {\n    try {\n      const response = await this.client.get(`/wallet/balance/${walletAddress}`);\n      return {\n        data: response.data.balance,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async getWalletTransactions(walletAddress) {\n    try {\n      const response = await this.client.get(`/wallet/transactions/${walletAddress}`);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  handleError(error) {\n    var _error$response2, _error$response2$data;\n    // Handle API error responses\n    if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.detail) {\n      return error.response.data.detail;\n    }\n    // Handle network errors\n    if (error.message === 'Network Error') {\n      return 'Unable to connect to server. Please check your internet connection.';\n    }\n    // Handle timeout errors\n    if (error.code === 'ECONNABORTED') {\n      return 'Request timed out. Please try again.';\n    }\n    // Handle other axios errors\n    if (error.message) {\n      return error.message;\n    }\n    return 'An unexpected error occurred. Please try again.';\n  }\n}\nexport const apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["axios","ApiClient","constructor","client","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","window","location","href","Promise","reject","signup","data","formData","FormData","append","email","username","password","post","access_token","setItem","success","errorMessage","handleError","console","login","log","URLSearchParams","toString","withCredentials","refreshToken","logout","removeItem","getAgentStatus","agentType","get","startAgent","stopAgent","createStrategy","strategy","getStrategies","createWallet","name","confirmWallet","walletAddress","confirmed","getWalletBalance","balance","getWalletTransactions","_error$response2","_error$response2$data","detail","message","code","apiClient"],"sources":["/home/ubuntu/repos/tradingbot/src/frontend/src/api/client.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosError } from 'axios';\n\n// API Response Types\nexport interface ApiResponse<T> {\n  data?: T;\n  error?: string;\n  success: boolean;\n}\n\nexport interface AuthResponse {\n  access_token: string;\n  token_type: string;\n}\n\nexport interface SignupData {\n  email: string;\n  username: string;\n  password: string;\n}\n\nexport interface LoginData {\n  username: string;\n  password: string;\n}\n\nexport interface AgentResponse {\n  id: string;\n  type: 'trading' | 'defi';\n  status: 'running' | 'stopped' | 'error';\n  lastUpdated: string;\n}\n\nexport interface StrategyResponse {\n  id: string;\n  name: string;\n  type: string;\n  parameters: Record<string, any>;\n  status: 'active' | 'inactive';\n  createdAt: string;\n}\n\nexport interface WalletResponse {\n  address: string;\n  publicKey: string;\n  balance: string;\n  transactions: Array<{\n    hash: string;\n    type: string;\n    amount: string;\n    status: string;\n    timestamp: string;\n  }>;\n}\n\nclass ApiClient {\n  private client: AxiosInstance;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/api/v1`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Add request interceptor to include JWT token\n    this.client.interceptors.request.use((config) => {\n      const token = localStorage.getItem('token');\n      if (token && config.headers) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Add response interceptor for error handling\n    this.client.interceptors.response.use(\n      (response) => response,\n      (error: AxiosError) => {\n        if (error.response?.status === 401) {\n          // Handle unauthorized access\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Auth Management\n  async signup(data: SignupData): Promise<ApiResponse<AuthResponse>> {\n    try {\n      const formData = new FormData();\n      formData.append('email', data.email);\n      formData.append('username', data.username);\n      formData.append('password', data.password);\n      \n      const response = await this.client.post('/auth/signup', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n      \n      if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n      }\n      return { data: response.data, success: true };\n    } catch (error) {\n      const errorMessage = this.handleError(error);\n      console.error('API Error:', errorMessage);\n      return { error: errorMessage, success: false };\n    }\n  }\n\n  async login(data: LoginData): Promise<ApiResponse<AuthResponse>> {\n    try {\n      console.log('Attempting login with:', { username: data.username });\n      const formData = new URLSearchParams();\n      formData.append('username', data.username);\n      formData.append('password', data.password);\n      formData.append('grant_type', 'password');\n      \n      const response = await this.client.post('/auth/login', formData.toString(), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        withCredentials: true, // Required for cookies\n      });\n      \n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async refreshToken(): Promise<ApiResponse<AuthResponse>> {\n    try {\n      const response = await this.client.post('/auth/refresh', {}, {\n        withCredentials: true,\n      });\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async logout(): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post('/auth/logout', {}, {\n        withCredentials: true,\n      });\n      localStorage.removeItem('token');\n      localStorage.removeItem('token_expiry');\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async logout(): Promise<void> {\n    localStorage.removeItem('token');\n  }\n\n  // Agent Management\n  async getAgentStatus(agentType: string): Promise<ApiResponse<AgentResponse>> {\n    try {\n      const response = await this.client.get(`/agents/${agentType}/status`);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async startAgent(agentType: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post(`/agents/${agentType}/start`);\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async stopAgent(agentType: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post(`/agents/${agentType}/stop`);\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  // Strategy Management\n  async createStrategy(strategy: {\n    name: string;\n    promotion_words: string;\n    timeframe: string;\n    risk_level: string;\n    description: string;\n  }): Promise<ApiResponse<StrategyResponse>> {\n    try {\n      const response = await this.client.post('/strategies/trading/create', strategy);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getStrategies(): Promise<ApiResponse<StrategyResponse[]>> {\n    try {\n      const response = await this.client.get('/strategies');\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  // Wallet Management\n  async createWallet(name: string): Promise<ApiResponse<WalletResponse>> {\n    try {\n      const response = await this.client.post('/wallet/create', { name });\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async confirmWallet(walletAddress: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post('/wallet/confirm', { walletAddress, confirmed: true });\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getWalletBalance(walletAddress: string): Promise<ApiResponse<string>> {\n    try {\n      const response = await this.client.get(`/wallet/balance/${walletAddress}`);\n      return { data: response.data.balance, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getWalletTransactions(walletAddress: string): Promise<ApiResponse<WalletResponse['transactions']>> {\n    try {\n      const response = await this.client.get(`/wallet/transactions/${walletAddress}`);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  private handleError(error: any): string {\n    // Handle API error responses\n    if (error.response?.data?.detail) {\n      return error.response.data.detail;\n    }\n    // Handle network errors\n    if (error.message === 'Network Error') {\n      return 'Unable to connect to server. Please check your internet connection.';\n    }\n    // Handle timeout errors\n    if (error.code === 'ECONNABORTED') {\n      return 'Request timed out. Please try again.';\n    }\n    // Handle other axios errors\n    if (error.message) {\n      return error.message;\n    }\n    return 'An unexpected error occurred. Please try again.';\n  }\n}\n\nexport const apiClient = new ApiClient();\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}