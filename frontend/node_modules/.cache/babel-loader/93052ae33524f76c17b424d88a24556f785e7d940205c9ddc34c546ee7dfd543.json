{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Box,Paper,Typography,CircularProgress,Alert,Button,Stepper,Step,StepLabel}from'@mui/material';import apiClient from'../api/client';import{useNavigate}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BotIntegration=()=>{const navigate=useNavigate();const[activeStep,setActiveStep]=useState(0);const[error,setError]=useState(null);const[isLoading,setIsLoading]=useState(true);const[strategy,setStrategy]=useState(null);const steps=['Validating Strategy','Configuring Bot','Testing Connections','Integration Complete'];useEffect(()=>{const integrateBot=async()=>{try{var _statusResponse$data;const strategyId=localStorage.getItem('currentStrategyId');if(!strategyId){throw new Error('No strategy selected');}// Step 1: Validate Strategy\nconst strategyResponse=await apiClient.getStrategies();if(!strategyResponse.success||!strategyResponse.data){throw new Error('Failed to validate strategy');}const currentStrategy=strategyResponse.data.find(s=>s.id===strategyId);if(!currentStrategy){throw new Error('Strategy not found');}setStrategy(currentStrategy);setActiveStep(1);// Step 2: Configure Bot\nconst startResponse=await apiClient.startAgent('trading');if(!startResponse.success){throw new Error('Failed to start trading agent');}setActiveStep(2);// Step 3: Test Connections\nconst statusResponse=await apiClient.getAgentStatus('trading');if(!statusResponse.success||((_statusResponse$data=statusResponse.data)===null||_statusResponse$data===void 0?void 0:_statusResponse$data.status)!=='running'){throw new Error('Failed to verify agent status');}setActiveStep(3);setIsLoading(false);}catch(err){setError(err instanceof Error?err.message:'Bot integration failed. Please try again.');setIsLoading(false);}};integrateBot();},[]);const handleContinue=()=>{navigate('/key-management');};return/*#__PURE__*/_jsxs(Box,{sx:{maxWidth:800,mx:'auto',p:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,children:\"Bot Integration\"}),error&&/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mb:3},children:error}),/*#__PURE__*/_jsxs(Paper,{sx:{p:3},children:[/*#__PURE__*/_jsx(Stepper,{activeStep:activeStep,sx:{mb:4},children:steps.map(label=>/*#__PURE__*/_jsx(Step,{children:/*#__PURE__*/_jsx(StepLabel,{children:label})},label))}),/*#__PURE__*/_jsx(Box,{sx:{textAlign:'center',py:3},children:isLoading?/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(CircularProgress,{sx:{mb:2}}),/*#__PURE__*/_jsxs(Typography,{children:[steps[activeStep],\"...\"]})]}):/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,color:\"success.main\",children:\"Bot Integration Complete!\"}),/*#__PURE__*/_jsxs(Typography,{color:\"textSecondary\",sx:{mb:3},children:[\"Your trading bot has been successfully configured with strategy: \",strategy===null||strategy===void 0?void 0:strategy.name]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"textSecondary\",sx:{mb:2},children:[\"Strategy Type: \",strategy===null||strategy===void 0?void 0:strategy.type,(strategy===null||strategy===void 0?void 0:strategy.parameters)&&/*#__PURE__*/_jsx(Box,{component:\"pre\",sx:{mt:1,p:2,bgcolor:'grey.100',borderRadius:1},children:JSON.stringify(strategy.parameters,null,2)})]}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",size:\"large\",onClick:handleContinue,children:\"Continue to Key Management\"})]})})]})]});};export default BotIntegration;","map":{"version":3,"names":["React","useState","useEffect","Box","Paper","Typography","CircularProgress","Alert","Button","Stepper","Step","StepLabel","apiClient","useNavigate","jsx","_jsx","jsxs","_jsxs","BotIntegration","navigate","activeStep","setActiveStep","error","setError","isLoading","setIsLoading","strategy","setStrategy","steps","integrateBot","_statusResponse$data","strategyId","localStorage","getItem","Error","strategyResponse","getStrategies","success","data","currentStrategy","find","s","id","startResponse","startAgent","statusResponse","getAgentStatus","status","err","message","handleContinue","sx","maxWidth","mx","p","children","variant","gutterBottom","severity","mb","map","label","textAlign","py","color","name","type","parameters","component","mt","bgcolor","borderRadius","JSON","stringify","size","onClick"],"sources":["/home/ubuntu/repos/tradingbot/src/frontend/src/pages/BotIntegration.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  CircularProgress,\n  Alert,\n  Button,\n  Stepper,\n  Step,\n  StepLabel,\n} from '@mui/material';\nimport apiClient, { StrategyResponse } from '../api/client';\nimport { useNavigate } from 'react-router-dom';\n\nconst BotIntegration: React.FC = () => {\n  const navigate = useNavigate();\n  const [activeStep, setActiveStep] = useState(0);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [strategy, setStrategy] = useState<StrategyResponse | null>(null);\n\n  const steps = [\n    'Validating Strategy',\n    'Configuring Bot',\n    'Testing Connections',\n    'Integration Complete',\n  ];\n\n  useEffect(() => {\n    const integrateBot = async () => {\n      try {\n        const strategyId = localStorage.getItem('currentStrategyId');\n        if (!strategyId) {\n          throw new Error('No strategy selected');\n        }\n\n        // Step 1: Validate Strategy\n        const strategyResponse = await apiClient.getStrategies();\n        if (!strategyResponse.success || !strategyResponse.data) {\n          throw new Error('Failed to validate strategy');\n        }\n        \n        const currentStrategy = strategyResponse.data.find(s => s.id === strategyId);\n        if (!currentStrategy) {\n          throw new Error('Strategy not found');\n        }\n        \n        setStrategy(currentStrategy);\n        setActiveStep(1);\n\n        // Step 2: Configure Bot\n        const startResponse = await apiClient.startAgent('trading');\n        if (!startResponse.success) {\n          throw new Error('Failed to start trading agent');\n        }\n        setActiveStep(2);\n\n        // Step 3: Test Connections\n        const statusResponse = await apiClient.getAgentStatus('trading');\n        if (!statusResponse.success || statusResponse.data?.status !== 'running') {\n          throw new Error('Failed to verify agent status');\n        }\n        setActiveStep(3);\n\n        setIsLoading(false);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Bot integration failed. Please try again.');\n        setIsLoading(false);\n      }\n    };\n\n    integrateBot();\n  }, []);\n\n  const handleContinue = () => {\n    navigate('/key-management');\n  };\n\n  return (\n    <Box sx={{ maxWidth: 800, mx: 'auto', p: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        Bot Integration\n      </Typography>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      <Paper sx={{ p: 3 }}>\n        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>\n          {steps.map((label) => (\n            <Step key={label}>\n              <StepLabel>{label}</StepLabel>\n            </Step>\n          ))}\n        </Stepper>\n\n        <Box sx={{ textAlign: 'center', py: 3 }}>\n          {isLoading ? (\n            <Box>\n              <CircularProgress sx={{ mb: 2 }} />\n              <Typography>\n                {steps[activeStep]}...\n              </Typography>\n            </Box>\n          ) : (\n            <Box>\n              <Typography variant=\"h6\" gutterBottom color=\"success.main\">\n                Bot Integration Complete!\n              </Typography>\n              <Typography color=\"textSecondary\" sx={{ mb: 3 }}>\n                Your trading bot has been successfully configured with strategy: {strategy?.name}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\n                Strategy Type: {strategy?.type}\n                {strategy?.parameters && (\n                  <Box component=\"pre\" sx={{ mt: 1, p: 2, bgcolor: 'grey.100', borderRadius: 1 }}>\n                    {JSON.stringify(strategy.parameters, null, 2)}\n                  </Box>\n                )}\n              </Typography>\n              <Button\n                variant=\"contained\"\n                size=\"large\"\n                onClick={handleContinue}\n              >\n                Continue to Key Management\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default BotIntegration;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}