{"ast":null,"code":"import axios, { AxiosHeaders } from 'axios';\n\n// API Response Types\n\nclass ApiClient {\n  constructor() {\n    this.client = void 0;\n    this.client = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/api/v1`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Add request interceptor to include JWT token and handle token refresh\n    this.client.interceptors.request.use(async config => {\n      const token = localStorage.getItem('token');\n      const tokenExpiry = localStorage.getItem('token_expiry');\n      if (token && tokenExpiry) {\n        var _config$url;\n        // Check if token is about to expire (within 5 minutes)\n        const expiryTime = parseInt(tokenExpiry);\n        if (Date.now() + 5 * 60 * 1000 >= expiryTime && !((_config$url = config.url) !== null && _config$url !== void 0 && _config$url.includes('/auth/refresh'))) {\n          try {\n            var _response$data;\n            const response = await this.refreshToken();\n            if (response.success && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.access_token) {\n              config.headers.Authorization = `Bearer ${response.data.access_token}`;\n              return config;\n            }\n          } catch (error) {\n            console.error('Token refresh failed:', error);\n          }\n        }\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Add response interceptor for error handling\n    this.client.interceptors.response.use(response => response, async error => {\n      var _error$response, _originalRequest$url;\n      const originalRequest = error.config;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && originalRequest && !((_originalRequest$url = originalRequest.url) !== null && _originalRequest$url !== void 0 && _originalRequest$url.includes('/auth/refresh'))) {\n        try {\n          var _response$data2;\n          const response = await this.refreshToken();\n          if (response.success && (_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.access_token) {\n            // Retry the original request with new token\n            const newRequest = {\n              ...originalRequest\n            };\n            if (newRequest.headers instanceof Object) {\n              newRequest.headers = new AxiosHeaders({\n                ...originalRequest.headers,\n                Authorization: `Bearer ${response.data.access_token}`\n              });\n            }\n            return this.client.request(newRequest);\n          }\n        } catch (refreshError) {\n          console.error('Token refresh failed:', refreshError);\n        }\n\n        // If refresh failed, redirect to login\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Auth Management\n  async signup(data) {\n    try {\n      const formData = new FormData();\n      formData.append('email', data.email);\n      formData.append('username', data.username);\n      formData.append('password', data.password);\n      const response = await this.client.post('/auth/signup', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('token_expiry', String(Date.now() + response.data.expires_in * 1000));\n      }\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      const errorMessage = this.handleError(error);\n      console.error('API Error:', errorMessage);\n      return {\n        error: errorMessage,\n        success: false\n      };\n    }\n  }\n  async login(data) {\n    try {\n      console.log('Attempting login with:', {\n        username: data.username\n      });\n      const formData = new URLSearchParams();\n      formData.append('username', data.username);\n      formData.append('password', data.password);\n      formData.append('grant_type', 'password');\n      const response = await this.client.post('/auth/login', formData.toString(), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        withCredentials: true // Required for cookies\n      });\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async refreshToken() {\n    try {\n      const response = await this.client.post('/auth/refresh', {}, {\n        withCredentials: true\n      });\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async logout() {\n    try {\n      await this.client.post('/auth/logout', {}, {\n        withCredentials: true\n      });\n      localStorage.removeItem('token');\n      localStorage.removeItem('token_expiry');\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n\n  // Agent Management\n  async getAgentStatus(agentType) {\n    try {\n      const response = await this.client.get(`/agents/${agentType}/status`);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async startAgent(agentType) {\n    try {\n      await this.client.post(`/agents/${agentType}/start`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async stopAgent(agentType) {\n    try {\n      await this.client.post(`/agents/${agentType}/stop`);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n\n  // Strategy Management\n  async createStrategy(strategy) {\n    try {\n      const response = await this.client.post('/strategies/trading/create', strategy);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async getStrategies() {\n    try {\n      const response = await this.client.get('/strategies');\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n\n  // Wallet Management\n  async createWallet(name) {\n    try {\n      const response = await this.client.post('/wallet/create', {\n        name\n      });\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async confirmWallet(walletAddress) {\n    try {\n      await this.client.post('/wallet/confirm', {\n        walletAddress,\n        confirmed: true\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async getWalletBalance(walletAddress) {\n    try {\n      const response = await this.client.get(`/wallet/balance/${walletAddress}`);\n      return {\n        data: response.data.balance,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  async getWalletTransactions(walletAddress) {\n    try {\n      const response = await this.client.get(`/wallet/transactions/${walletAddress}`);\n      return {\n        data: response.data,\n        success: true\n      };\n    } catch (error) {\n      return {\n        error: this.handleError(error),\n        success: false\n      };\n    }\n  }\n  handleError(error) {\n    var _error$response2, _error$response2$data;\n    // Handle API error responses\n    if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.detail) {\n      return error.response.data.detail;\n    }\n    // Handle network errors\n    if (error.message === 'Network Error') {\n      return 'Unable to connect to server. Please check your internet connection.';\n    }\n    // Handle timeout errors\n    if (error.code === 'ECONNABORTED') {\n      return 'Request timed out. Please try again.';\n    }\n    // Handle other axios errors\n    if (error.message) {\n      return error.message;\n    }\n    return 'An unexpected error occurred. Please try again.';\n  }\n}\nexport const apiClient = new ApiClient();\nexport default apiClient;","map":{"version":3,"names":["axios","AxiosHeaders","ApiClient","constructor","client","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","tokenExpiry","_config$url","expiryTime","parseInt","Date","now","url","includes","_response$data","response","refreshToken","success","data","access_token","Authorization","error","console","_error$response","_originalRequest$url","originalRequest","status","_response$data2","newRequest","Object","refreshError","window","location","href","Promise","reject","signup","formData","FormData","append","email","username","password","post","setItem","String","expires_in","errorMessage","handleError","login","log","URLSearchParams","toString","withCredentials","logout","removeItem","getAgentStatus","agentType","get","startAgent","stopAgent","createStrategy","strategy","getStrategies","createWallet","name","confirmWallet","walletAddress","confirmed","getWalletBalance","balance","getWalletTransactions","_error$response2","_error$response2$data","detail","message","code","apiClient"],"sources":["/home/ubuntu/repos/tradingbot/src/frontend/src/api/client.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosError, AxiosHeaders } from 'axios';\n\n// API Response Types\nexport interface ApiResponse<T> {\n  data?: T;\n  error?: string;\n  success: boolean;\n}\n\nexport interface AuthResponse {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n}\n\nexport interface SignupData {\n  email: string;\n  username: string;\n  password: string;\n}\n\nexport interface LoginData {\n  username: string;\n  password: string;\n}\n\nexport interface AgentResponse {\n  id: string;\n  type: 'trading' | 'defi';\n  status: 'running' | 'stopped' | 'error';\n  lastUpdated: string;\n}\n\nexport interface StrategyResponse {\n  id: string;\n  name: string;\n  type: string;\n  parameters: Record<string, any>;\n  status: 'active' | 'inactive';\n  createdAt: string;\n}\n\nexport interface WalletResponse {\n  address: string;\n  publicKey: string;\n  balance: string;\n  transactions: Array<{\n    hash: string;\n    type: string;\n    amount: string;\n    status: string;\n    timestamp: string;\n  }>;\n}\n\nclass ApiClient {\n  private client: AxiosInstance;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL || 'http://localhost:8000'}/api/v1`,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Add request interceptor to include JWT token and handle token refresh\n    this.client.interceptors.request.use(async (config) => {\n      const token = localStorage.getItem('token');\n      const tokenExpiry = localStorage.getItem('token_expiry');\n      \n      if (token && tokenExpiry) {\n        // Check if token is about to expire (within 5 minutes)\n        const expiryTime = parseInt(tokenExpiry);\n        if (Date.now() + 5 * 60 * 1000 >= expiryTime && !config.url?.includes('/auth/refresh')) {\n          try {\n            const response = await this.refreshToken();\n            if (response.success && response.data?.access_token) {\n              config.headers.Authorization = `Bearer ${response.data.access_token}`;\n              return config;\n            }\n          } catch (error) {\n            console.error('Token refresh failed:', error);\n          }\n        }\n        \n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Add response interceptor for error handling\n    this.client.interceptors.response.use(\n      (response) => response,\n      async (error: AxiosError) => {\n        const originalRequest = error.config;\n        \n        if (error.response?.status === 401 && originalRequest && !originalRequest.url?.includes('/auth/refresh')) {\n          try {\n            const response = await this.refreshToken();\n            if (response.success && response.data?.access_token) {\n              // Retry the original request with new token\n              const newRequest = { ...originalRequest };\n              if (newRequest.headers instanceof Object) {\n                newRequest.headers = new AxiosHeaders({\n                  ...originalRequest.headers,\n                  Authorization: `Bearer ${response.data.access_token}`\n                });\n              }\n              return this.client.request(newRequest);\n            }\n          } catch (refreshError) {\n            console.error('Token refresh failed:', refreshError);\n          }\n          \n          // If refresh failed, redirect to login\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Auth Management\n  async signup(data: SignupData): Promise<ApiResponse<AuthResponse>> {\n    try {\n      const formData = new FormData();\n      formData.append('email', data.email);\n      formData.append('username', data.username);\n      formData.append('password', data.password);\n      \n      const response = await this.client.post('/auth/signup', formData, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      });\n      \n      if (response.data.access_token) {\n        localStorage.setItem('token', response.data.access_token);\n        localStorage.setItem('token_expiry', String(Date.now() + (response.data.expires_in * 1000)));\n      }\n      return { data: response.data, success: true };\n    } catch (error) {\n      const errorMessage = this.handleError(error);\n      console.error('API Error:', errorMessage);\n      return { error: errorMessage, success: false };\n    }\n  }\n\n  async login(data: LoginData): Promise<ApiResponse<AuthResponse>> {\n    try {\n      console.log('Attempting login with:', { username: data.username });\n      const formData = new URLSearchParams();\n      formData.append('username', data.username);\n      formData.append('password', data.password);\n      formData.append('grant_type', 'password');\n      \n      const response = await this.client.post('/auth/login', formData.toString(), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        withCredentials: true, // Required for cookies\n      });\n      \n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async refreshToken(): Promise<ApiResponse<AuthResponse>> {\n    try {\n      const response = await this.client.post('/auth/refresh', {}, {\n        withCredentials: true,\n      });\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async logout(): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post('/auth/logout', {}, {\n        withCredentials: true,\n      });\n      localStorage.removeItem('token');\n      localStorage.removeItem('token_expiry');\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  // Agent Management\n  async getAgentStatus(agentType: string): Promise<ApiResponse<AgentResponse>> {\n    try {\n      const response = await this.client.get(`/agents/${agentType}/status`);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async startAgent(agentType: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post(`/agents/${agentType}/start`);\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async stopAgent(agentType: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post(`/agents/${agentType}/stop`);\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  // Strategy Management\n  async createStrategy(strategy: {\n    name: string;\n    promotion_words: string;\n    timeframe: string;\n    risk_level: string;\n    description: string;\n  }): Promise<ApiResponse<StrategyResponse>> {\n    try {\n      const response = await this.client.post('/strategies/trading/create', strategy);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getStrategies(): Promise<ApiResponse<StrategyResponse[]>> {\n    try {\n      const response = await this.client.get('/strategies');\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  // Wallet Management\n  async createWallet(name: string): Promise<ApiResponse<WalletResponse>> {\n    try {\n      const response = await this.client.post('/wallet/create', { name });\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async confirmWallet(walletAddress: string): Promise<ApiResponse<void>> {\n    try {\n      await this.client.post('/wallet/confirm', { walletAddress, confirmed: true });\n      return { success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getWalletBalance(walletAddress: string): Promise<ApiResponse<string>> {\n    try {\n      const response = await this.client.get(`/wallet/balance/${walletAddress}`);\n      return { data: response.data.balance, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  async getWalletTransactions(walletAddress: string): Promise<ApiResponse<WalletResponse['transactions']>> {\n    try {\n      const response = await this.client.get(`/wallet/transactions/${walletAddress}`);\n      return { data: response.data, success: true };\n    } catch (error) {\n      return { error: this.handleError(error), success: false };\n    }\n  }\n\n  private handleError(error: any): string {\n    // Handle API error responses\n    if (error.response?.data?.detail) {\n      return error.response.data.detail;\n    }\n    // Handle network errors\n    if (error.message === 'Network Error') {\n      return 'Unable to connect to server. Please check your internet connection.';\n    }\n    // Handle timeout errors\n    if (error.code === 'ECONNABORTED') {\n      return 'Request timed out. Please try again.';\n    }\n    // Handle other axios errors\n    if (error.message) {\n      return error.message;\n    }\n    return 'An unexpected error occurred. Please try again.';\n  }\n}\n\nexport const apiClient = new ApiClient();\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}