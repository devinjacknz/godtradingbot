{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport apiClient from '../api/client';\nexport const useAuthContext = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(() => {\n    const token = localStorage.getItem('token');\n    return !!token;\n  });\n  const signup = useCallback(async (email, username, password) => {\n    try {\n      const response = await apiClient.signup({\n        email,\n        username,\n        password\n      });\n      if (response.success && response.data) {\n        // Set user data\n        const newUser = {\n          id: username,\n          email,\n          username,\n          roles: [{\n            name: 'backend_developer',\n            permissions: ['execute_market_maker_trades']\n          }]\n        };\n        setUser(newUser);\n        setIsAuthenticated(true);\n        window.location.href = '/agent-selection';\n        return true;\n      }\n      console.error('Signup failed:', response.error);\n      return false;\n    } catch (error) {\n      console.error('Signup error:', error);\n      return false;\n    }\n  }, []);\n  const login = useCallback(async (email, password) => {\n    try {\n      // Send the full email for login\n      const response = await apiClient.login({\n        username: email,\n        password\n      });\n      console.log('Login response:', response); // Debug log\n      if (response.success && response.data) {\n        // Store the JWT token\n        localStorage.setItem('token', response.data.access_token);\n        // Set user data using email as identifier\n        const newUser = {\n          id: email,\n          email,\n          username: email.split('@')[0],\n          roles: [{\n            name: 'backend_developer',\n            permissions: ['execute_market_maker_trades']\n          }]\n        };\n        setUser(newUser);\n        setIsAuthenticated(true);\n        window.location.href = '/agent-selection';\n        return true;\n      }\n      console.error('Login failed:', response.error);\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  }, []);\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    setUser(null);\n    setIsAuthenticated(false);\n  }, []);\n  return {\n    user,\n    isAuthenticated,\n    login,\n    signup,\n    logout\n  };\n};\n_s(useAuthContext, \"x+xf//kRwUhmL4T/3NTUSyEtlk4=\");","map":{"version":3,"names":["useState","useCallback","apiClient","useAuthContext","_s","user","setUser","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","signup","email","username","password","response","success","data","newUser","id","roles","name","permissions","window","location","href","console","error","login","log","setItem","access_token","split","logout","removeItem"],"sources":["/home/ubuntu/repos/tradingbot/src/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport apiClient from '../api/client';\n\nexport interface User {\n  id: string;\n  email: string;\n  username: string;\n  roles: Array<{\n    name: string;\n    permissions: string[];\n  }>;\n}\n\nexport interface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  signup: (email: string, username: string, password: string) => Promise<boolean>;\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => void;\n}\n\nexport const useAuthContext = (): AuthContextType => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(() => {\n    const token = localStorage.getItem('token');\n    return !!token;\n  });\n\n  const signup = useCallback(async (email: string, username: string, password: string) => {\n    try {\n      const response = await apiClient.signup({ email, username, password });\n      if (response.success && response.data) {\n        // Set user data\n        const newUser: User = {\n          id: username,\n          email,\n          username,\n          roles: [{ name: 'backend_developer', permissions: ['execute_market_maker_trades'] }]\n        };\n        setUser(newUser);\n        setIsAuthenticated(true);\n        window.location.href = '/agent-selection';\n        return true;\n      }\n      console.error('Signup failed:', response.error);\n      return false;\n    } catch (error) {\n      console.error('Signup error:', error);\n      return false;\n    }\n  }, []);\n\n  const login = useCallback(async (email: string, password: string) => {\n    try {\n      // Send the full email for login\n      const response = await apiClient.login({ username: email, password });\n      console.log('Login response:', response); // Debug log\n      if (response.success && response.data) {\n        // Store the JWT token\n        localStorage.setItem('token', response.data.access_token);\n        // Set user data using email as identifier\n        const newUser: User = {\n          id: email,\n          email,\n          username: email.split('@')[0],\n          roles: [{ name: 'backend_developer', permissions: ['execute_market_maker_trades'] }]\n        };\n        setUser(newUser);\n        setIsAuthenticated(true);\n        window.location.href = '/agent-selection';\n        return true;\n      }\n      console.error('Login failed:', response.error);\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  }, []);\n\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    setUser(null);\n    setIsAuthenticated(false);\n  }, []);\n\n  return {\n    user,\n    isAuthenticated,\n    login,\n    signup,\n    logout,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}