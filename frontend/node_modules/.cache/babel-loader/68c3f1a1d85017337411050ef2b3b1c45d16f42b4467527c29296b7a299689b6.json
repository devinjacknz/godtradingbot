{"ast":null,"code":"import{useState,useCallback,useEffect}from'react';import{useNavigate}from'react-router-dom';import apiClient from'../api/client';// Token management helpers\nconst setTokens=(access_token,expires_in)=>{localStorage.setItem('token',access_token);localStorage.setItem('token_expiry',String(Date.now()+expires_in*1000));};const clearTokens=()=>{localStorage.removeItem('token');localStorage.removeItem('token_expiry');};export const useAuthContext=()=>{const navigate=useNavigate();const[user,setUser]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(()=>{const token=localStorage.getItem('token');return!!token;});const[isLoading,setIsLoading]=useState(false);const signup=useCallback(async(email,username,password)=>{setIsLoading(true);try{var _response$data;const response=await apiClient.signup({email,username,password});if(response.success&&(_response$data=response.data)!==null&&_response$data!==void 0&&_response$data.access_token){// Set tokens first\nsetTokens(response.data.access_token,response.data.expires_in);// Verify token storage\nconst token=localStorage.getItem('token');const tokenExpiry=localStorage.getItem('token_expiry');if(!token||!tokenExpiry){throw new Error('Failed to store authentication tokens');}// Set user data\nconst newUser={id:username,email,username,roles:[{name:'backend_developer',permissions:['execute_market_maker_trades']}]};setUser(newUser);setIsAuthenticated(true);// Ensure state updates are processed before navigation\nawait new Promise(resolve=>setTimeout(resolve,100));// Double check authentication state\nif(!isAuthenticated||!user){throw new Error('Failed to set user authentication state');}navigate('/agent-selection');return true;}throw new Error(response.error||'Signup failed');}catch(error){console.error('Signup error:',error);// Clear any partial authentication state\nclearTokens();setUser(null);setIsAuthenticated(false);throw error instanceof Error?error:new Error('An unexpected error occurred');}finally{setIsLoading(false);}},[navigate,isAuthenticated,user]);const login=useCallback(async formData=>{setIsLoading(true);try{var _response$data2;const response=await apiClient.login({username:formData.email,password:formData.password});if(response.success&&(_response$data2=response.data)!==null&&_response$data2!==void 0&&_response$data2.access_token){// Set tokens first\nsetTokens(response.data.access_token,response.data.expires_in);// Verify token storage\nconst token=localStorage.getItem('token');const tokenExpiry=localStorage.getItem('token_expiry');if(!token||!tokenExpiry){throw new Error('Failed to store authentication tokens');}// Set user data using email as identifier\nconst newUser={id:formData.email,email:formData.email,username:formData.email.split('@')[0],roles:[{name:'backend_developer',permissions:['execute_market_maker_trades']}]};setUser(newUser);setIsAuthenticated(true);// Ensure state updates are processed before navigation\nawait new Promise(resolve=>setTimeout(resolve,100));// Double check authentication state\nif(!isAuthenticated||!user){throw new Error('Failed to set user authentication state');}navigate('/agent-selection');return true;}throw new Error(response.error||'Login failed');}catch(error){console.error('Login error:',error);// Clear any partial authentication state\nclearTokens();setUser(null);setIsAuthenticated(false);throw error instanceof Error?error:new Error('An unexpected error occurred');}finally{setIsLoading(false);}},[navigate,isAuthenticated,user]);// Function to refresh the access token\nconst refreshToken=useCallback(async()=>{try{var _response$data3;const response=await apiClient.refreshToken();if(response.success&&(_response$data3=response.data)!==null&&_response$data3!==void 0&&_response$data3.access_token){// Set tokens first\nsetTokens(response.data.access_token,response.data.expires_in);// Verify token storage\nconst token=localStorage.getItem('token');const tokenExpiry=localStorage.getItem('token_expiry');if(!token||!tokenExpiry){console.error('Failed to store refreshed tokens');clearTokens();setUser(null);setIsAuthenticated(false);return false;}return true;}return false;}catch(error){console.error('Token refresh failed:',error);// Clear any partial authentication state\nclearTokens();setUser(null);setIsAuthenticated(false);return false;}},[]);const logout=useCallback(async()=>{try{// Attempt server-side logout\nawait apiClient.logout();}catch(error){console.error('Logout error:',error);}finally{// Clear all authentication state regardless of server response\nclearTokens();setUser(null);setIsAuthenticated(false);// Verify cleanup\nconst token=localStorage.getItem('token');const tokenExpiry=localStorage.getItem('token_expiry');if(token||tokenExpiry){console.error('Failed to clear authentication state');// Force clear again\nlocalStorage.removeItem('token');localStorage.removeItem('token_expiry');}// Ensure state updates are processed before navigation\nawait new Promise(resolve=>setTimeout(resolve,100));navigate('/login');}},[navigate]);// Add token expiry check effect with enhanced logging\nuseEffect(()=>{const checkTokenExpiry=async()=>{console.log('Checking token expiry...');const token=localStorage.getItem('token');const tokenExpiry=localStorage.getItem('token_expiry');if(!token||!tokenExpiry){console.error('Token or expiry missing during check:',{token:!!token,expiry:!!tokenExpiry});await logout();return;}const expiryTime=parseInt(tokenExpiry);const currentTime=Date.now();const timeToExpiry=expiryTime-currentTime;console.log('Token status:',{currentTime:new Date(currentTime).toISOString(),expiryTime:new Date(expiryTime).toISOString(),timeToExpiry:Math.floor(timeToExpiry/1000)+' seconds'});// Refresh token if it expires in less than 5 minutes\nif(currentTime+5*60*1000>=expiryTime){console.log('Token refresh needed, attempting refresh...');const success=await refreshToken();if(!success){console.error('Token refresh failed, logging out...');await logout();}else{console.log('Token refresh successful');// Verify refresh success\nconst newToken=localStorage.getItem('token');const newExpiry=localStorage.getItem('token_expiry');if(!newToken||!newExpiry){console.error('Token refresh verification failed');await logout();}}}};// Initial check\ncheckTokenExpiry();// Check every 4 minutes\nconst interval=setInterval(checkTokenExpiry,4*60*1000);console.log('Token check interval set: 4 minutes');return()=>{console.log('Cleaning up token check interval');clearInterval(interval);};},[refreshToken,logout]);return{user,isAuthenticated,isLoading,signup,login,logout,refreshToken};};","map":{"version":3,"names":["useState","useCallback","useEffect","useNavigate","apiClient","setTokens","access_token","expires_in","localStorage","setItem","String","Date","now","clearTokens","removeItem","useAuthContext","navigate","user","setUser","isAuthenticated","setIsAuthenticated","token","getItem","isLoading","setIsLoading","signup","email","username","password","_response$data","response","success","data","tokenExpiry","Error","newUser","id","roles","name","permissions","Promise","resolve","setTimeout","error","console","login","formData","_response$data2","split","refreshToken","_response$data3","logout","checkTokenExpiry","log","expiry","expiryTime","parseInt","currentTime","timeToExpiry","toISOString","Math","floor","newToken","newExpiry","interval","setInterval","clearInterval"],"sources":["/home/ubuntu/repos/tradingbot/src/frontend/src/hooks/useAuth.ts"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport apiClient from '../api/client';\n\nexport interface User {\n  id: string;\n  email: string;\n  username: string;\n  roles: Array<{\n    name: string;\n    permissions: string[];\n  }>;\n}\n\nexport interface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  signup: (email: string, username: string, password: string) => Promise<boolean>;\n  login: (formData: { email: string; password: string }) => Promise<boolean>;\n  logout: () => Promise<void>;\n  refreshToken: () => Promise<boolean>;\n}\n\n// Token management helpers\nconst setTokens = (access_token: string, expires_in: number) => {\n  localStorage.setItem('token', access_token);\n  localStorage.setItem('token_expiry', String(Date.now() + (expires_in * 1000)));\n};\n\nconst clearTokens = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('token_expiry');\n};\n\nexport const useAuthContext = (): AuthContextType => {\n  const navigate = useNavigate();\n  const [user, setUser] = useState<User | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(() => {\n    const token = localStorage.getItem('token');\n    return !!token;\n  });\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const signup = useCallback(async (email: string, username: string, password: string) => {\n    setIsLoading(true);\n    try {\n      const response = await apiClient.signup({ email, username, password });\n      if (response.success && response.data?.access_token) {\n        // Set tokens first\n        setTokens(response.data.access_token, response.data.expires_in);\n        \n        // Verify token storage\n        const token = localStorage.getItem('token');\n        const tokenExpiry = localStorage.getItem('token_expiry');\n        \n        if (!token || !tokenExpiry) {\n          throw new Error('Failed to store authentication tokens');\n        }\n        \n        // Set user data\n        const newUser: User = {\n          id: username,\n          email,\n          username,\n          roles: [{ name: 'backend_developer', permissions: ['execute_market_maker_trades'] }]\n        };\n        setUser(newUser);\n        setIsAuthenticated(true);\n        \n        // Ensure state updates are processed before navigation\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        // Double check authentication state\n        if (!isAuthenticated || !user) {\n          throw new Error('Failed to set user authentication state');\n        }\n        \n        navigate('/agent-selection');\n        return true;\n      }\n      throw new Error(response.error || 'Signup failed');\n    } catch (error) {\n      console.error('Signup error:', error);\n      // Clear any partial authentication state\n      clearTokens();\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error instanceof Error ? error : new Error('An unexpected error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [navigate, isAuthenticated, user]);\n\n  const login = useCallback(async (formData: { email: string; password: string }) => {\n    setIsLoading(true);\n    try {\n      const response = await apiClient.login({ username: formData.email, password: formData.password });\n      if (response.success && response.data?.access_token) {\n        // Set tokens first\n        setTokens(response.data.access_token, response.data.expires_in);\n        \n        // Verify token storage\n        const token = localStorage.getItem('token');\n        const tokenExpiry = localStorage.getItem('token_expiry');\n        \n        if (!token || !tokenExpiry) {\n          throw new Error('Failed to store authentication tokens');\n        }\n        \n        // Set user data using email as identifier\n        const newUser: User = {\n          id: formData.email,\n          email: formData.email,\n          username: formData.email.split('@')[0],\n          roles: [{ name: 'backend_developer', permissions: ['execute_market_maker_trades'] }]\n        };\n        setUser(newUser);\n        setIsAuthenticated(true);\n        \n        // Ensure state updates are processed before navigation\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        // Double check authentication state\n        if (!isAuthenticated || !user) {\n          throw new Error('Failed to set user authentication state');\n        }\n        \n        navigate('/agent-selection');\n        return true;\n      }\n      throw new Error(response.error || 'Login failed');\n    } catch (error) {\n      console.error('Login error:', error);\n      // Clear any partial authentication state\n      clearTokens();\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error instanceof Error ? error : new Error('An unexpected error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [navigate, isAuthenticated, user]);\n\n  // Function to refresh the access token\n  const refreshToken = useCallback(async () => {\n    try {\n      const response = await apiClient.refreshToken();\n      if (response.success && response.data?.access_token) {\n        // Set tokens first\n        setTokens(response.data.access_token, response.data.expires_in);\n        \n        // Verify token storage\n        const token = localStorage.getItem('token');\n        const tokenExpiry = localStorage.getItem('token_expiry');\n        \n        if (!token || !tokenExpiry) {\n          console.error('Failed to store refreshed tokens');\n          clearTokens();\n          setUser(null);\n          setIsAuthenticated(false);\n          return false;\n        }\n        \n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      // Clear any partial authentication state\n      clearTokens();\n      setUser(null);\n      setIsAuthenticated(false);\n      return false;\n    }\n  }, []);\n\n  const logout = useCallback(async () => {\n    try {\n      // Attempt server-side logout\n      await apiClient.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear all authentication state regardless of server response\n      clearTokens();\n      setUser(null);\n      setIsAuthenticated(false);\n      \n      // Verify cleanup\n      const token = localStorage.getItem('token');\n      const tokenExpiry = localStorage.getItem('token_expiry');\n      \n      if (token || tokenExpiry) {\n        console.error('Failed to clear authentication state');\n        // Force clear again\n        localStorage.removeItem('token');\n        localStorage.removeItem('token_expiry');\n      }\n      \n      // Ensure state updates are processed before navigation\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      navigate('/login');\n    }\n  }, [navigate]);\n\n  // Add token expiry check effect with enhanced logging\n  useEffect(() => {\n    const checkTokenExpiry = async () => {\n      console.log('Checking token expiry...');\n      const token = localStorage.getItem('token');\n      const tokenExpiry = localStorage.getItem('token_expiry');\n      \n      if (!token || !tokenExpiry) {\n        console.error('Token or expiry missing during check:', { token: !!token, expiry: !!tokenExpiry });\n        await logout();\n        return;\n      }\n\n      const expiryTime = parseInt(tokenExpiry);\n      const currentTime = Date.now();\n      const timeToExpiry = expiryTime - currentTime;\n      \n      console.log('Token status:', {\n        currentTime: new Date(currentTime).toISOString(),\n        expiryTime: new Date(expiryTime).toISOString(),\n        timeToExpiry: Math.floor(timeToExpiry / 1000) + ' seconds'\n      });\n\n      // Refresh token if it expires in less than 5 minutes\n      if (currentTime + 5 * 60 * 1000 >= expiryTime) {\n        console.log('Token refresh needed, attempting refresh...');\n        const success = await refreshToken();\n        \n        if (!success) {\n          console.error('Token refresh failed, logging out...');\n          await logout();\n        } else {\n          console.log('Token refresh successful');\n          // Verify refresh success\n          const newToken = localStorage.getItem('token');\n          const newExpiry = localStorage.getItem('token_expiry');\n          \n          if (!newToken || !newExpiry) {\n            console.error('Token refresh verification failed');\n            await logout();\n          }\n        }\n      }\n    };\n\n    // Initial check\n    checkTokenExpiry();\n    \n    // Check every 4 minutes\n    const interval = setInterval(checkTokenExpiry, 4 * 60 * 1000);\n    console.log('Token check interval set: 4 minutes');\n    \n    return () => {\n      console.log('Cleaning up token check interval');\n      clearInterval(interval);\n    };\n  }, [refreshToken, logout]);\n\n  return {\n    user,\n    isAuthenticated,\n    isLoading,\n    signup,\n    login,\n    logout,\n    refreshToken,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}