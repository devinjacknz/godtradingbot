version: '3.8'

x-common-env: &common-env
  ENV: development
  DEBUG: true
  DB_USER: tradingbot
  DB_PASSWORD: tradingbot
  DB_HOST: postgres
  DB_PORT: 5432
  DB_NAME: tradingbot
  DATABASE_URL: postgresql+asyncpg://tradingbot:tradingbot@postgres:5432/tradingbot
  SYNC_DATABASE_URL: postgresql://tradingbot:tradingbot@postgres:5432/tradingbot
  REDIS_URL: redis://redis:6379/0
  PYTHONPATH: /app
  LOG_LEVEL: DEBUG

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: tradingbot
      POSTGRES_USER: tradingbot
      POSTGRES_PASSWORD: tradingbot
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradingbot -d tradingbot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - tradingbot_network

  redis:
    image: redis:7.0-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - tradingbot_network

  api_gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    command: ["uvicorn", "src.api_gateway.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    environment:
      <<: *common-env
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tradingbot_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  trading_agent:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    command: ["python", "-m", "src.trading_agent.main"]
    environment:
      <<: *common-env
    volumes:
      - .:/app
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api_gateway:
        condition: service_healthy
    networks:
      - tradingbot_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - tradingbot_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - tradingbot_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  tradingbot_network:
    driver: bridge 