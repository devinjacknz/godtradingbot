version: '3.8'

# 共享配置
x-logging: &default-logging
  options:
    max-size: "100m"
    max-file: "3"
  driver: json-file

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  # API服务
  api:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: api
    image: tradingbot/api:latest
    container_name: tradingbot-api
    restart: unless-stopped
    ports:
      - "${API_PORT}:8000"
      - "${GRPC_PORT}:8003"
    volumes:
      - ../../:/app
      - /var/log/tradingbot:/var/log/tradingbot
    environment:
      - APP_ENV=${APP_ENV}
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URI=${REDIS_URI}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      <<: *default-healthcheck

  # 前端服务
  frontend:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: frontend
    image: tradingbot/frontend:latest
    container_name: tradingbot-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      - NODE_ENV=production
      - API_URL=http://api:8000
    depends_on:
      api:
        condition: service_healthy
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      <<: *default-healthcheck

  # Go执行器
  executor:
    build:
      context: ../../
      dockerfile: Dockerfile
      target: executor
    image: tradingbot/executor:latest
    container_name: tradingbot-executor
    restart: unless-stopped
    ports:
      - "${TRADING_PORT}:8001"
    environment:
      - APP_ENV=${APP_ENV}
      - REDIS_URI=${REDIS_URI}
    depends_on:
      redis:
        condition: service_healthy
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8001/health"]
      <<: *default-healthcheck

  # MongoDB
  mongodb:
    image: mongo:6
    container_name: tradingbot-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    logging: *default-logging
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      <<: *default-healthcheck

  # PostgreSQL
  postgres:
    image: postgres:14
    container_name: tradingbot-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    logging: *default-logging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      <<: *default-healthcheck

  # Redis
  redis:
    image: redis:7
    container_name: tradingbot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      <<: *default-healthcheck

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tradingbot-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ../../config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      <<: *default-healthcheck

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: tradingbot-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    depends_on:
      prometheus:
        condition: service_healthy
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      <<: *default-healthcheck

volumes:
  mongodb_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: tradingbot-network
    driver: bridge
