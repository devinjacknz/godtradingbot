version: '3.8'

services:
  api_gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
        ENVIRONMENT: production
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - SERVICE_NAME=api_gateway
      - ENVIRONMENT=production
      - DEBUG=0
      - POSTGRES_DB=tradingbot
      - POSTGRES_USER=tradingbot
      - POSTGRES_PASSWORD=tradingbot
      - DATABASE_URL=postgresql+asyncpg://tradingbot:tradingbot@postgres:5432/tradingbot
      - SYNC_DATABASE_URL=postgresql://tradingbot:tradingbot@postgres:5432/tradingbot
      - REDIS_URL=redis://redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SOLANA_RPC_URL=https://api.mainnet-beta.solana.com
      - JUPITER_API_URL=https://quote-api.jup.ag/v6
      - TRADING_SERVICE_URL=http://trading_agent:8001
      - MARKET_DATA_SERVICE_URL=http://market_data:8002
      - ANALYTICS_SERVICE_URL=http://analytics:8003
      - WALLET_SERVICE_URL=http://wallet:8004
    command: ["/usr/local/bin/docker-entrypoint.sh"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  trading_agent:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
        ENVIRONMENT: production
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - SERVICE_NAME=trading_agent
      - ENVIRONMENT=production
      - DEBUG=0
      - POSTGRES_DB=tradingbot
      - POSTGRES_USER=tradingbot
      - POSTGRES_PASSWORD=tradingbot
      - DATABASE_URL=postgresql+asyncpg://tradingbot:tradingbot@postgres:5432/tradingbot
      - SYNC_DATABASE_URL=postgresql://tradingbot:tradingbot@postgres:5432/tradingbot
      - REDIS_URL=redis://redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - SOLANA_RPC_URL=https://api.mainnet-beta.solana.com
      - JUPITER_API_URL=https://quote-api.jup.ag/v6
    command: ["/usr/local/bin/docker-entrypoint.sh"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api_gateway:
        condition: service_healthy
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://api_gateway:8000
      - VITE_TRADING_SERVICE_URL=http://trading_agent:8001
      - VITE_SOLANA_RPC_URL=https://api.mainnet-beta.solana.com
      - VITE_JUPITER_API_URL=https://quote-api.jup.ag/v6
    depends_on:
      api_gateway:
        condition: service_healthy
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=tradingbot
      - POSTGRES_USER=tradingbot
      - POSTGRES_PASSWORD=tradingbot
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_INITDB_ARGS=--data-checksums
    deploy:
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradingbot -d tradingbot"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  prometheus:
    image: prom/prometheus:v2.45.0
    restart: unless-stopped
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/alert.rules:/etc/prometheus/alert.rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.max-block-duration=2h'
      - '--storage.tsdb.min-block-duration=2h'
    ports:
      - "9090:9090"
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  grafana:
    image: grafana/grafana:10.0.3
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=https://grafana.tradingbot.com
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/trading_metrics.json
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_DISABLE_LOGIN_FORM=false
    depends_on:
      - prometheus
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  alertmanager:
    image: prom/alertmanager:latest
    restart: unless-stopped
    volumes:
      - ./docker/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD", "wget", "-q", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  default:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
